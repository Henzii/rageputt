{"version":3,"sources":["queries.js","reducers/notificationReducer.js","utils/stuff.js","Peli/Player.js","Peli/Tulosruutu.js","Peli/NewGameModal.js","components/BarChart.js","Peli/PlayerStats.js","Peli/TabPanel.js","Peli/index.js","components/Notification.js","components/Vetomenu.js","components/Statsit.js","reducers/userReducer.js","components/LoginForm.js","Kaverit/FriendRequestForm.js","Kaverit/FriendRequests.js","Kaverit/index.js","components/Asetukset.js","components/CreateUserForm.js","VanhatPelit/Pelikortti.js","VanhatPelit/index.js","App.js","serviceWorkerRegistration.js","reducers/tuloksetReducer.js","store.js","index.js"],"names":["CARD_CHANGED","gql","LOGIN","END_GAME","GET_ME","CREATE_GAME","GET_GAMES","SET_SCORE","CREATE_USER","GET_ROUND","ANSWER_FRIEND_REQUEST","SEND_FRIEND_REQUEST","setNotification","message","type","data","reducer","state","alive","action","laskePisteet","tulokset","pisteet","dist","i","length","tulokset2ChartData","palautus","putteja","puttejaSisaan","prossa","etaisyys","timestamp2String","ts","aika","Date","setUTCMilliseconds","tunti","getHours","getTimezoneOffset","minsat","getMinutes","getDate","getMonth","getFullYear","RadioButtons","loading","Number","push","CircularProgress","FormControlLabel","labelPlacement","value","label","control","Radio","color","size","style","padding","Player","player","round","roundData","useSelector","dispatch","useDispatch","useState","setLoading","useMutation","variables","roundId","setScore","distance","isNaN","user","name","className","RadioGroup","row","whiteSpace","onChange","e","console","log","target","score","catch","finally","Tulosruutu","kierrosData","kierros","client","useApolloClient","pushed","useSubscription","getRound","id","useEffect","dataMuistissa","readQuery","query","updatedGetRound","players","map","p","changedCard","writeQuery","Grid","container","item","IconButton","onClick","ChevronLeft","component","ChevronRight","Kaverivalinta","kaverit","handleClick","k","ListItem","Checkbox","NewGameModal","open","setModal","handleNewGame","mina","useQuery","pelaajat","setPelaajat","Modal","onClose","onSubmit","preventDefault","InputLabel","htmlFor","Select","native","Divider","List","checked","getMe","friends","pelaaja","includes","filter","Button","fullWidth","variant","marginTop","BarChart","otsikko","Paper","height","text","min","max","argumentField","valueField","PlayerStats","statsit","TabPanel","props","children","index","other","hidden","Peli","modalOpen","tabValue","setTabValue","useLazyQuery","haeRundi","uusiPeli","paataPeli","a","res","createGame","handleEndGame","to","Backdrop","called","Tabs","event","uusi","Tab","Notification","notification","Snackbar","autoHideDuration","Alert","severity","Vetomenu","menuOpen","setMenuOpen","notLogged","Drawer","anchor","button","Link","disabled","Statsit","statsRawData","statsData","getGames","kaikkiPuttiProssat","kaikkiPisteet","maxPisteet","find","game","setUser","LoginForm","loginProcess","setLoginProcess","login","handleLogout","clearStore","window","localStorage","clear","handleLogin","password","then","result","setItem","sailo","TextField","FriendRequestForm","handleSendFriendRequest","KaveriKortti","kaveri","handleFriendRequest","elevation","paddingLeft","display","width","float","paddingTop","fontWeight","Check","Cancel","FriendRequests","pyynnot","KaveriLista","Kaverit","refetchQueries","answerFriendRequest","sendFriendRequest","friendRequests","friendId","answer","Asetukset","xs","email","CreateUserForm","createUser","cuData","tunnus","errors","setErrors","handleSubmit","vars","password2","error","Container","Pelikortti","peli","aktivoi","marginBottom","timestamp","VanhatPelit","g","YlaMenu","openMenu","AppBar","position","Toolbar","edge","Typography","flexGrow","App","gotme","token","getItem","otaToken","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reducers","combineReducers","tuloksetReducer","userReducer","notificationReducer","store","createStore","httpLink","HttpLink","uri","authLink","setContext","_","headers","authorization","socketLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","link","connectToDevTools","ReactDOM","render","ApolloProvider","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"gWAEaA,EAAeC,YAAH,8OAUZC,EAAQD,YAAH,sPAaLE,EAAWF,YAAH,oIAORG,EAASH,YAAH,oMAUNI,EAAcJ,YAAH,qJAOXK,EAAYL,YAAH,qMAUTM,EAAYN,YAAH,qaAiBTO,EAAcP,YAAH,8SAYXQ,EAAYR,YAAH,uTAeTS,EAAwBT,YAAH,qNAQrBU,EAAsBV,YAAH,sJ,+DCjGnBW,GAAkB,SAACC,EAASC,GACrC,MAAO,CACHA,KAAM,mBACNC,KAAM,CACFD,OACAD,aAUGG,GA7BC,WAAsC,IAArCC,EAAoC,uDAA5B,CAAEC,OAAO,GAAQC,EAAW,uCACjD,OAAOA,EAAOL,MACV,IAAK,mBACD,MAAO,CACHD,QAASM,EAAOJ,KAAKF,QACrBC,KAAMK,EAAOJ,KAAKD,KAClBI,OAAO,GAEf,IAAK,oBACF,OAAO,2BAAKD,GAAZ,IAAmBC,OAAM,IAC5B,QACI,OAAOD,ICVNG,GAAe,SAACC,GAIzB,IAFA,IAAIC,EAAU,EACVC,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAASI,OAAQD,IAAM,CACvC,GAAoB,OAAhBH,EAASG,GAAa,OAAOF,EACjCA,GAAWD,EAASG,GAAGD,EACvBA,EAAO,EAAEF,EAASG,GAEtB,OAAOF,GAGEI,GAAqB,WAQ9B,IAFoE,IANrCL,EAMoC,uDANzB,GAAIM,EAMqB,uDANV,CACrD,CAAEJ,KAAM,KAAMK,QAAS,EAAGC,cAAe,EAAGC,OAAQ,GACpD,CAAEP,KAAM,KAAMK,QAAS,EAAGC,cAAe,EAAGC,OAAQ,GACpD,CAAEP,KAAM,KAAMK,QAAS,EAAGC,cAAe,EAAGC,OAAQ,GACpD,CAAEP,KAAM,KAAMK,QAAS,EAAGC,cAAe,EAAGC,OAAQ,GACpD,CAAEP,KAAM,KAAMK,QAAS,EAAGC,cAAe,EAAGC,OAAQ,GACpD,CAAEP,KAAM,MAAOK,QAAS,EAAGC,cAAe,EAAGC,OAAQ,IAEhDN,EAAE,EAAGA,EAAIH,EAASI,OAAQD,IAAK,CACpC,GAAoB,OAAhBH,EAASG,GAAa,OAC1B,IAAMO,EAAkB,IAANP,EAAWH,EAASG,EAAE,GAAK,EAE7CG,EAASI,GAAUH,SAAW,EAC9BD,EAASI,GAAUF,eAAiBR,EAASG,GAC7CG,EAASI,GAAUD,OAASH,EAASI,GAAUF,cAAgBF,EAASI,GAAUH,QAAU,IAEhG,OAAOD,GAEEK,GAAmB,SAACC,GAC7B,IAAIC,EAAO,IAAIC,KAAK,GACpBD,EAAKE,mBAAmBH,GACxB,IAAMI,EAAQH,EAAKI,WAAWJ,EAAKK,oBAAoB,GACjDC,EAASN,EAAKO,aACpB,OAAOP,EAAKQ,UAAY,KAAOR,EAAKS,WAAW,GAAK,IAAMT,EAAKU,cAAgB,KACzEP,EAAQ,GAAM,IAAIA,EAAQA,GAAS,KAClCH,EAAKO,aAAe,GAAM,IAAID,EAASA,I,QCa5CK,GAAe,SAAC,GAAiB,IAE/BrB,EAFgBsB,EAAc,EAAdA,QACdnB,EAAW,GAEjB,IAAKH,EAAI,EAAGA,EAAI,EAAGA,IACXsB,GAAWtB,IAAMuB,OAAOD,GACxBnB,EAASqB,KAAK,eAACC,EAAA,EAAD,KAGdtB,EAASqB,KACL,eAACE,EAAA,EAAD,CACIC,eAAe,MAEfC,MAAO5B,EACP6B,MAAO7B,EACP8B,QACI,eAACC,EAAA,EAAD,CAAOC,MAAM,UAAUC,KAAK,QACxBC,MAAO,CAAEC,QAAS,UALrBnC,IAUrB,OAAOG,GAGIiC,GAlEA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAEhBC,EAAYC,aAAY,SAAA/C,GAAK,OAAIA,EAAMI,YACvC4C,EAAWC,cAEjB,EAA8BC,mBAAS,MAAvC,mBAAOrB,EAAP,KAAgBsB,EAAhB,KAEA,EAAmBC,YAAY9D,EAAW,CAAE+D,UAAW,CAAEC,QAASR,EAAUQ,WAArEC,EAAP,oBAoBMC,EAAYX,EAAQ,EAAK,EAAID,EAAOxC,SAASyC,EAAQ,GAAK,GAC1DxC,EAAUF,GAAayC,EAAOxC,UAChCO,EAAUiC,EAAOxC,SAASyC,GAE9B,OADIY,MAAM9C,KAAUA,EAAU,MAE1B,iCACI,gCAAKiC,EAAOc,KAAKC,KAAjB,IAAyBH,GAAuB,OAAhD,OAA4DnD,KAC5D,sBAAKuD,UAAU,gBAAf,SACI,eAACC,EAAA,EAAD,CAAYC,KAAG,EAACrB,MAAO,CAAEsB,WAAY,UAAY5B,MAAOxB,EAASqD,SA1BxD,SAACC,GAClBC,QAAQC,IAAI,sBAAoBF,EAAEG,OAAOjC,OACzCgB,EAAWc,EAAEG,OAAOjC,OACpBoB,EAAS,CACLF,UAAW,CACPC,QAASR,EAAUQ,QACnBT,MAAOC,EAAUD,MACjBD,OAAQA,EAAOc,KAAKA,KACpBW,MAAOvC,OAAOmC,EAAEG,OAAOjC,UAE5BmC,OAAM,SAAAL,GACLjB,EAASrD,GAAgBsE,EAAErE,QAAS,aACrC2E,SAAQ,WACPpB,EAAW,MACPN,EAAQ,IAAMD,EAAOxC,SAASyC,EAAM,IACpCG,EAAUrD,GAAgB,cAAgBkD,EAAQ,iBAAkB,gBAWpE,SACI,eAAC,GAAD,CAAchB,QAASA,Y,oBCsB5B2C,GAzDI,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAarE,EAAe,EAAfA,SAEzB4C,EAAWC,cACXyB,EAAUtE,EAASyC,MAEnB8B,EAASC,eACTC,EAASC,aAAgB/F,EAAc,CAAEsE,UAAW,CAAEC,QAASmB,EAAY3E,KAAKiF,SAASC,MAuC/F,OArCAC,qBAAU,WACN,IAAKJ,EAAOhD,QAAS,CACjBqC,QAAQC,IAAIU,GACZ,IAAMK,EAAgBP,EAAOQ,UAAU,CAAEC,MAAO5F,EAAW6D,UAAW,CAAEC,QAASmB,EAAY3E,KAAKiF,SAASC,MAG3G,GAFAd,QAAQC,IAAI,WAAYe,GAEF,OAAlBA,EAAwB,CAExB,IAAMG,EAAe,2BACdH,EAAcH,UADA,IAEjBO,QAASJ,EAAcH,SAASO,QAAQC,KAAI,SAAAC,GAAC,OACxCA,EAAE9B,KAAKA,OAASmB,EAAO/E,KAAK2F,YAAY3F,KAAK4D,KAAKA,KAC7CmB,EAAO/E,KAAK2F,YAAY3F,KACxB0F,OAGdtB,QAAQC,IAAI,kBAAgBkB,GAC5BV,EAAOe,WAAW,CACdN,MAAO5F,EACP6D,UAAW,CAAEC,QAASmB,EAAY3E,KAAKiF,SAASC,IAChDlF,KAAM,CACFiF,SAAS,2BACFG,EAAcH,UADb,IAEJO,QAASJ,EAAcH,SAASO,QAAQC,KAAI,SAAAC,GAAC,OACxCA,EAAE9B,KAAKA,OAASmB,EAAO/E,KAAK2F,YAAY3F,KAAK4D,KAAKA,KAC7CmB,EAAO/E,KAAK2F,YAAY3F,KACxB0F,cAS/B,CAACX,IAGA,iCACI,gBAACc,EAAA,EAAD,CAAMC,WAAS,EAAChC,UAAU,gBAA1B,UACI,eAAC+B,EAAA,EAAD,CAAME,MAAI,EAAV,SAAY,eAACC,EAAA,EAAD,CAAYC,QAAS,kBAAM/C,EAAS,CAAEnD,KAAM,eAA5C,SAA4D,eAACmG,EAAA,EAAD,QACxE,gBAACL,EAAA,EAAD,CAAME,MAAI,EAACI,UAAW,KAAtB,mBAAmCvB,EAAU,KAC7C,eAACiB,EAAA,EAAD,CAAME,MAAI,EAAV,SAAW,eAACC,EAAA,EAAD,CAAYC,QAAS,kBAAM/C,EAAS,CAAEnD,KAAM,eAA5C,SAA4D,eAACqG,EAAA,EAAD,WAE1EzB,EAAY3E,KAAKiF,SAASO,QAAQC,KAAI,SAAAC,GAAC,OAAI,eAAC,GAAD,CAAgC5C,OAAQ4C,EAAG3C,MAAO6B,GAArCc,EAAE9B,KAAKsB,GAAK,c,gFCA3EmB,GAAgB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAC9B,OACID,EAAQb,KAAI,SAAAe,GAAC,OAAI,eAACC,GAAA,EAAD,UAAqB,eAACtE,EAAA,EAAD,CAAkBI,QAAS,eAACmE,GAAA,EAAD,CAAUxC,SAAU,kBAAMqC,EAAYC,MAAQlE,MAAOkE,EAAE5C,QAAxF4C,EAAEtB,QAI3ByB,GA/DM,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAE9BC,EAAOC,aAAU3H,GACvB,EAAkC+D,mBAAS,IAA3C,mBAAQ6D,EAAR,KAAkBC,EAAlB,KAEA,GAAIH,EAAKhF,QACL,OACI,mDAeR,OACI,+BACI,eAACoF,GAAA,EAAD,CACIP,KAAMA,EACNQ,QAAS,kBAAMP,GAAS,IAF5B,SAII,sBAAK/C,UAAU,eAAf,SACI,wBAAMuD,SAnBD,SAAClD,GAClBA,EAAEmD,iBACFR,EAAeG,IAiBH,UACI,4CACA,iCACI,eAACM,GAAA,EAAD,CAAYC,QAAQ,oBAApB,uBACA,eAACC,GAAA,EAAD,CAAQC,QAAM,EAAd,SACI,yBAAQrF,MAAO,EAAf,2BAGR,eAACsF,EAAA,EAAD,IACA,iCACI,2CACA,gBAACC,GAAA,EAAD,WACA,eAACnB,GAAA,EAAD,UACI,eAACtE,EAAA,EAAD,CAAkBI,QAAS,eAACmE,GAAA,EAAD,CAAUmB,SAAO,IAAKvF,MAAM,cAE3D,eAAC,GAAD,CAAegE,QAASS,EAAK/G,KAAK8H,MAAMC,QAASxB,YA9BrD,SAACyB,GACbf,EAASgB,SAASD,EAAQ9C,IAC1BgC,EAAaD,EAASiB,QAAQ,SAAAxC,GAAC,OAAIA,IAAMsC,EAAQ9C,OAEjDgC,EAAY,GAAD,oBAAMD,GAAN,CAAgBe,EAAQ9C,YA4BnB,eAACiD,EAAA,EAAD,CAAQC,WAAS,EAACC,QAAQ,YAAY5F,MAAM,UAAU1C,KAAK,SAA3D,oBACA,eAACoI,EAAA,EAAD,CAAQC,WAAS,EAACnC,QAAS,kBAAMY,GAAS,IAAQwB,QAAQ,YAAY5F,MAAM,YAAYE,MAAO,CAAE2F,UAAW,OAA5G,iC,4BC/BbC,GAjBE,SAAC,GAAyB,IAAvBvI,EAAsB,EAAtBA,KAAsB,IAAhBwI,eAAgB,MAAR,GAAQ,EACtC,OACI,eAACC,GAAA,EAAD,UACI,gBAAC,KAAD,CAAOzI,KAAMA,EAAM0I,OAAO,MAA1B,UACI,eAAC,KAAD,CAAOC,KAAMH,IACb,eAAC,KAAD,IACA,eAAC,KAAD,CAAWI,IAAK,EAAGC,IAAK,MACxB,eAAC,KAAD,CACIC,cAAc,OACdC,WAAW,WAEf,eAAC,KAAD,UCFDC,GATK,SAAC,GAAgB,IAAdlG,EAAa,EAAbA,OAEbmG,EAAUtI,GAAmBmC,EAAOxC,UAC1C,OACI,+BACI,eAAC,GAAD,CAAUN,KAAMiJ,O,UCMXC,OAdjB,SAAkBC,GACd,IAAQC,EAAqCD,EAArCC,SAAU/G,EAA2B8G,EAA3B9G,MAAOgH,EAAoBF,EAApBE,MAAUC,EAAnC,aAA6CH,EAA7C,8BAEA,OACE,8CACEI,OAAQlH,IAAUgH,GACdC,GAFN,aAIGjH,IAAUgH,GACPD,MC+GGI,GA7GF,WAET,IAAMtG,EAAWC,cACjB,EAA8BC,oBAAS,GAAvC,mBAAOqG,EAAP,KAAkB5C,EAAlB,KACA,EAAgCzD,mBAAS,GAAzC,mBAAOsG,EAAP,KAAiBC,EAAjB,KAEMrJ,EAAW2C,aAAY,SAAA/C,GAAK,OAAIA,EAAMI,YACtCsD,EAAOX,aAAY,SAAA/C,GAAK,OAAIA,EAAM0D,QAExC,EAAgCgG,YAAalK,GAA7C,mBAAOmK,EAAP,KAAiBlF,EAAjB,KAEA,EAAmBrB,YAAYhE,GAAxBwK,EAAP,oBACA,EAAoBxG,YAAYlE,GAAzB2K,EAAP,oBAEMjD,EAAa,uCAAG,WAAOG,GAAP,eAAA+C,EAAA,sEAEAF,EAAS,CAAEvG,UAAW,CAAE0D,SAAUA,KAFlC,OAEZgD,EAFY,OAIlB/G,EAAS,CAAEnD,KAAM,SAAUC,KAAM,CAAEwD,QAASyG,EAAIjK,KAAKkK,cACrDrD,GAAS,GALS,2CAAH,sDAObsD,EAAa,uCAAG,sBAAAH,EAAA,+EAGRD,EAAW,CAAExG,UAAW,CAAE2B,GAAI5E,EAASkD,WAH/B,sDAKdY,QAAQC,IAAI,0CAAgC,KAAEvE,SALhC,gCAQd,eAAC,IAAD,CAAUsK,GAAG,YARC,wDAAH,qDAYnB,OAAKxG,EAAKA,KAKNe,EAAY5C,QAER,eAACsI,EAAA,EAAD,CAAUzD,MAAM,EAAhB,SACI,eAAC1E,EAAA,EAAD,QAKPyC,EAAY2F,QAAUhK,EAASkD,SAChCqG,EAAS,CAAEtG,UAAW,CAAEC,QAASlD,EAASkD,WACrB,OAArBlD,EAASkD,SAAqBmB,EAAY3E,KAmB1C,uCACQ,gBAACuK,EAAA,EAAD,CACIlI,MAAOqH,EACPxF,SAAU,SAACsG,EAAOC,GAAR,OAAiBd,EAAYc,IACvCpC,QAAQ,YAHZ,UAMI,eAACqC,EAAA,EAAD,CAAKpI,MAAM,SACX,eAACoI,EAAA,EAAD,CAAKpI,MAAM,cACX,eAACoI,EAAA,EAAD,CAAKpI,MAAM,eAEnB,eAAC,GAAD,CAAUD,MAAOqH,EAAUL,MAAO,EAAlC,SACI,eAAC,GAAD,CAAY1E,YAAaA,EAAarE,SAAUA,MAEpD,gBAAC,GAAD,CAAU+B,MAAOqH,EAAUL,MAAO,EAAlC,UACI,yDACA,oDACA,qHAGA,eAAClB,EAAA,EAAD,CAAQzF,KAAK,QAAQuD,QAAS,kBAAM/C,EAAS,CAAEnD,KAAM,iBAAkBsI,QAAQ,YAAY5F,MAAM,UAAU2F,WAAS,EAApH,+BACA,eAACT,EAAA,EAAD,CAAUhF,MAAO,CAAE2F,UAAW,UAC9B,sDACA,6FAGA,eAACH,EAAA,EAAD,CAAQlC,QAASkE,EAAezH,KAAK,QAAQ2F,QAAQ,YAAY5F,MAAM,UAAU2F,WAAS,EAA1F,iCACA,eAACT,EAAA,EAAD,CAAUhF,MAAO,CAAE2F,UAAW,UAC9B,oDACA,kDAGA,eAACH,EAAA,EAAD,CAAQzF,KAAK,QAAQ2F,QAAQ,YAAY5F,MAAM,UAAU2F,WAAS,EAAlE,8BAEJ,eAAC,GAAD,CAAU/F,MAAOqH,EAAUL,MAAO,EAAlC,SACK1E,EAAY3E,KAAKiF,SAASO,QAAQC,KAAI,SAAAC,GAAC,OAAI,eAAC,GAAD,CAAa5C,OAAQ4C,GAAQ,KAAKA,EAAE9B,KAAKsB,YApDzF,iCACI,+DACA,2HAGA,0GAGA,eAACiD,EAAA,EAAD,CAAQlC,QAAS,kBAAMY,GAAS,IAAOpE,MAAM,UAAU4F,QAAQ,YAAY3F,KAAK,QAAQ0F,WAAS,EAAjG,8BAEA,eAAC,GAAD,CAAcxB,KAAM6C,EAAW5C,SAAUA,EAAUC,cAAeA,QAzBtE,eAAC,IAAD,CAAUsD,GAAG,Y,oBCvBVO,GAnBM,WAEjB,IAAMzH,EAAWC,cAEXyH,EAAe3H,aAAY,SAAA/C,GAAK,OAAIA,EAAM0K,gBAKhD,OACI,+BACI,eAACC,GAAA,EAAD,CAAUjE,KAAMgE,EAAazK,MAAO2K,iBAAkB,IAAM1D,QALhD,WAChBlE,ETYG,CACHnD,KAAM,oBACNC,KAAM,MSVF,SACI,eAAC+K,GAAA,EAAD,CAAOC,SAAUJ,EAAa7K,KAAMsI,QAAQ,SAA5C,SACKuC,EAAa9K,e,UC2CnBmL,GAxDE,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,YAGpBC,GADOnI,aAAY,SAAA/C,GAAK,OAAIA,EAAM0D,QACfA,KACzB,OACA,gBAACyH,GAAA,EAAD,CACIzE,KAAMsE,EACN7C,QAAQ,aACRiD,OAAO,OAHX,UAKI,eAACtF,EAAA,EAAD,CAAYC,QAAS,kBAAMkF,GAAY,IAAvC,SACI,eAACjF,EAAA,EAAD,MAEJ,eAACyB,EAAA,EAAD,IACA,eAACC,GAAA,EAAD,UACI,eAACnB,GAAA,EAAD,CAAU8E,QAAM,EAACpF,UAAWqF,IAAMpB,GAAG,IAAInE,QAAS,kBAAMkF,GAAY,IAApE,uBAIJ,eAACxD,EAAA,EAAD,IAEA,eAACC,GAAA,EAAD,UACI,eAACnB,GAAA,EAAD,CAAUgF,SAAUL,EAAWG,QAAM,EAACpF,UAAWqF,IAAMpB,GAAG,QAAQnE,QAAS,kBAAMkF,GAAY,IAA7F,yBAIJ,eAACxD,EAAA,EAAD,IACA,gBAACC,GAAA,EAAD,WACI,eAACnB,GAAA,EAAD,CAAUgF,SAAUL,EAAWG,QAAM,EAACpF,UAAWqF,IAAMpB,GAAG,UAAUnE,QAAS,kBAAMkF,GAAY,IAA/F,0BAGA,eAAC1E,GAAA,EAAD,CAAUgF,SAAUL,EAAWG,QAAM,EAACpF,UAAWqF,IAAMpB,GAAG,SAASnE,QAAS,kBAAMkF,GAAY,IAA9F,6BAIJ,eAACxD,EAAA,EAAD,IACA,eAACC,GAAA,EAAD,UACI,eAACnB,GAAA,EAAD,CAAUgF,SAAUL,EAAWG,QAAM,EAACpF,UAAWqF,IAAMpB,GAAG,WAAWnE,QAAS,kBAAMkF,GAAY,IAAhG,uBAIJ,eAACxD,EAAA,EAAD,IACA,gBAACC,GAAA,EAAD,WACI,eAACnB,GAAA,EAAD,CAAUN,UAAWqF,IAAMpB,GAAG,aAAaqB,SAAUL,EAAWG,QAAM,EAACtF,QAAS,kBAAMkF,GAAY,IAAlG,uBAGA,eAAC1E,GAAA,EAAD,CAAU8E,QAAM,EAACpF,UAAWqF,IAAMpB,GAAG,cAAcnE,QAAS,kBAAMkF,GAAY,IAA9E,wBAGA,eAAC1E,GAAA,EAAD,CAAU8E,QAAM,EAACpF,UAAWqF,IAAMpB,GAAG,SAASnE,QAAS,kBAAMkF,GAAY,IAAzE,0CCUGO,GAtDC,WAEZ,IAAMC,EAAe3E,aAASzH,GACxBqE,EAAOX,aAAY,SAAA/C,GAAK,OAAIA,EAAM0D,QAExC,GAAI+H,EAAa5J,QACb,OACI,eAACsI,EAAA,EAAD,CAAUzD,MAAM,EAAhB,SACI,eAAC1E,EAAA,EAAD,MAQZ,IAJA,IAAM0J,EAAYD,EAAa3L,KAAK6L,SAChCC,EAAqBnL,KACrBoL,EAAgB,GAChBC,EAAa,EACRvL,EAAI,EAAGA,EAAImL,EAAUlL,OAAQD,IAAK,CACvC,IAAMqC,EAAS8I,EAAUnL,GAAG+E,QAAQyG,MAAK,SAAAvG,GAAC,OAAIA,EAAE9B,KAAKA,OAASA,EAAKA,QACnEkI,EAAqBnL,GAAmBmC,EAAOxC,SAAUwL,GACzD,IAAMvL,EAAUF,GAAayC,EAAOxC,UAChCC,EAAUyL,IAAYA,EAAazL,GACvCwL,EAAc9J,KAAK,CAAEiK,KAAMzL,EAAG8D,MAAOhE,IAIzC,OAFA6D,QAAQC,IAAI0H,GAGR,iCACI,eAACtD,GAAA,EAAD,UACI,gBAAC5C,EAAA,EAAD,WACI,gBAACA,EAAA,EAAD,yBACa+F,EAAUlL,UAEvB,gBAACmF,EAAA,EAAD,2BACkBmG,UAI1B,eAAC,GAAD,CAAUhM,KAAM8L,EAAoBtD,QAAQ,iBAE5C,gBAAC,KAAD,CAAOxI,KAAM+L,EAAerD,OAAO,MAAnC,UACI,eAAC,KAAD,CAAOC,KAAK,YACZ,eAAC,KAAD,IACA,eAAC,KAAD,IACA,eAAC,KAAD,CACIG,cAAc,OACdC,WAAW,UAEf,eAAC,KAAD,W,UC3CHoD,GAAU,SAACtI,EAAMD,GAC1B,MAAO,CACH7D,KAAM,WACNC,KAAM,CACF4D,OACAC,UAWG5D,GA7BC,WAA0B,IAAzBC,EAAwB,uDAAhB,GAAIE,EAAY,uCACrC,OAAOA,EAAOL,MACV,IAAK,WACD,MAAO,CACH6D,KAAMxD,EAAOJ,KAAK4D,KAClBC,KAAMzD,EAAOJ,KAAK6D,MAE1B,IAAK,aACD,MAAO,GACX,QACI,OAAO3D,ICsDJkM,GAzDG,WAEd,IAAMlJ,EAAWC,cACXS,EAAOX,aAAY,SAAA/C,GAAK,OAAIA,EAAM0D,QAExC,EAAwCR,oBAAS,GAAjD,mBAAOiJ,EAAP,KAAqBC,EAArB,KACA,EAAkBhJ,YAAanE,GAAvBoN,EAAR,oBACM1H,EAASC,eAET0H,EAAY,uCAAG,WAAOrI,GAAP,SAAA6F,EAAA,sEACXnF,EAAO4H,aADI,OAEjBC,OAAOC,aAAaC,QACpB1J,EDKG,CACHnD,KAAM,aACNC,KAAM,KCNNkD,EAAU,CAAEnD,KAAM,gBAJD,2CAAH,sDAMZ8M,EAAW,uCAAG,WAAO1I,GAAP,SAAA6F,EAAA,sDAChB7F,EAAEmD,iBACFgF,GAAgB,GAChBC,EAAM,CAAEhJ,UAAW,CAAEK,KAAMO,EAAEG,OAAOV,KAAKvB,MAAOyK,SAAU3I,EAAEG,OAAOwI,SAASzK,SAAU0K,MAAK,SAAAC,GACvFN,OAAOC,aAAaM,QAAQ,YAAaD,EAAOhN,KAAKuM,MAAMlK,OAC3D+B,QAAQC,IAAI,eAAgB2I,EAAOhN,KAAKuM,OACxC,IAAMW,EAAQf,GAAQa,EAAOhN,KAAKuM,MAAM3I,KAAKC,KAAMmJ,EAAOhN,KAAKuM,MAAM3I,KAAKA,MAC1EV,EAASgK,GACTZ,GAAgB,MACjB9H,OAAM,SAAAL,GACLjB,EAAUrD,GAAgB,qCAA6B,UACvDyM,GAAgB,MAXJ,2CAAH,sDAejB,OADAlI,QAAQC,IAAIT,GACRA,EAAKA,KAED,iCACI,8CACA,mDAAqBA,EAAKA,KAA1B,SACA,eAACuE,EAAA,EAAD,CAAQlC,QAASuG,EAAcnE,QAAQ,YAAY5F,MAAM,UAAzD,8BAKR,iCACI,eAAC4H,EAAA,EAAD,CAAUzD,KAAMyF,EAAhB,SACI,eAACnK,EAAA,EAAD,MAGJ,wDACA,uBAAMmF,SAAUwF,EAAhB,SACI,gBAACjF,GAAA,EAAD,WACI,eAACnB,GAAA,EAAD,UAAU,eAAC0G,GAAA,EAAD,CAAWtJ,KAAK,OAAOvB,MAAM,SAAS+F,QAAQ,WAAWD,WAAS,MAC5E,eAAC3B,GAAA,EAAD,UAAU,eAAC0G,GAAA,EAAD,CAAWtJ,KAAK,WAAWvB,MAAM,WAAW+F,QAAQ,WAAWtI,KAAK,WAAWqI,WAAS,MAClG,eAAC3B,GAAA,EAAD,UAAU,eAAC0B,EAAA,EAAD,CAAQpI,KAAK,SAASsI,QAAQ,YAAY5F,MAAM,UAAUC,KAAK,QAA/D,iCC7Cf0K,GAXW,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,wBACzB,OACI,uCACA,+DACA,wBAAMhG,SAAUgG,EAAhB,UACA,eAACF,GAAA,EAAD,CAAW7K,MAAM,OAAO+F,QAAQ,WAAWD,WAAS,EAACvE,KAAK,WAC1D,eAACsE,EAAA,EAAD,CAAQpI,KAAK,SAASsI,QAAQ,YAAYD,WAAS,EAAC1F,KAAK,QAAQD,MAAM,UAAUE,MAAO,CAAC2F,UAAW,OAApG,iC,oBCQFgF,GAAe,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,oBAC5B,OACI,gBAAC/E,GAAA,EAAD,CAAOgF,UAAW,EAAG9K,MAAO,CAAE+K,YAAa,MAAOC,QAAS,eAAgBC,MAAO,QAAlF,UACI,uBAAKjL,MAAO,CAACkL,MAAO,OAAQC,WAAY,OAAQC,WAAY,QAA5D,UACIR,EAAO3J,KADX,KACmB2J,EAAO1J,KAD1B,OAGA,uBAAKlB,MAAO,CAACkL,MAAO,SAApB,UACI,eAAC7H,EAAA,EAAD,CAAYC,QAAS,kBAAMuH,EAAoBD,EAAOrI,IAAI,IAA1D,SACI,eAAC8I,GAAA,EAAD,CAAOrL,MAAO,CAAEF,MAAO,aAE3B,eAACuD,EAAA,EAAD,CAAYC,QAAS,kBAAMuH,EAAoBD,EAAOrI,IAAI,IAA1D,SACI,eAAC+I,GAAA,EAAD,CAAQtL,MAAO,CAAEF,MAAO,kBAO7ByL,GA/BQ,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QAASX,EAA0B,EAA1BA,oBAC/B,OAAIW,EAAQzN,OAAS,EAEb,0DAIJ,uCACI,mDACCyN,EAAQ1I,KAAI,SAAAe,GAAC,OAAI,eAAC,GAAD,CAAcgH,oBAAqBA,EAAqBD,OAAQ/G,GAAQA,EAAEtB,WCmClGkJ,GAAc,SAAC,GAAiB,IAAf9H,EAAc,EAAdA,QACnB,OAAIA,EAAQ5F,OAAS,EACT,mDAGR,qCAAO4F,EAAQb,KAAI,SAAAe,GAAC,OAAI,gCAAgBA,EAAE5C,KAAlB,KAA0B4C,EAAE3C,KAA5B,MAAS2C,EAAEtB,WAG5BmJ,GAhDC,WAEZ,IAAMtH,EAAOC,aAAS3H,GAEhB6D,EAAWC,cAGjB,EAAgCG,YAAa3D,EAAuB,CAAE2O,eAAgB,CAAC,CAAEhJ,MAAOjG,MAAxFkP,EAAR,oBACA,EAA8BjL,YAAa1D,GAAnC4O,EAAR,oBAkBA,OAAIzH,EAAKhF,QACI,sDAEbqC,QAAQC,IAAI0C,GAER,iCACA,2CACA,eAAC,GAAD,CAAaT,QAASS,EAAK/G,KAAK8H,MAAMC,UACtC,eAAC,GAAD,CAAgBoG,QAASpH,EAAK/G,KAAK8H,MAAM2G,eAAgBjB,oBAfjC,SAACkB,EAAUC,GACnCJ,EAAqB,CAAEhL,UAAW,CAAEmL,WAAUC,YAAW5B,MAAK,SAAA9C,GAC1D/G,EAAUrD,GAAgB,gCAA2B,eACtD2E,OAAM,SAAAL,GACLjB,EAAUrD,GAAgB,mBAAqBsE,EAAErE,QAAS,gBAY9D,eAAC,GAAD,CAAmBuN,wBAzBS,SAAClJ,GAC7BA,EAAEmD,iBACFkH,EAAmB,CAAEjL,UAAW,CAAEM,KAAMM,EAAEG,OAAOiJ,OAAOlL,SAAW0K,MAAK,SAAA9C,GACpE/G,EAAUrD,GAAgB,gCAA2B,eACtD2E,OAAM,SAAAL,GACLjB,EAAUrD,GAAgB,6BAAyBsE,EAAErE,QAAS,aAElEqE,EAAEG,OAAOiJ,OAAOlL,MAAQ,WCQjBuM,GA5BG,WAEd,IAAMhL,EAAOoD,aAAS3H,GACtB,OAAIuE,EAAK7B,QAED,eAACsI,EAAA,EAAD,CAAUzD,MAAM,EAAhB,SACI,eAAC1E,EAAA,EAAD,MAKR,iCACI,yCACA,gBAAC2D,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,eAACD,EAAA,EAAD,CAAME,MAAI,EAAC8I,GAAI,EAAf,oBACA,eAAChJ,EAAA,EAAD,CAAME,MAAI,EAAC8I,GAAI,EAAf,SAAmBjL,EAAK5D,KAAK8H,MAAMlE,OACnC,eAACiC,EAAA,EAAD,CAAME,MAAI,EAAC8I,GAAI,EAAf,kBACA,eAAChJ,EAAA,EAAD,CAAME,MAAI,EAAC8I,GAAI,EAAf,SAAmBjL,EAAK5D,KAAK8H,MAAMjE,OACnC,eAACgC,EAAA,EAAD,CAAME,MAAI,EAAC8I,GAAI,EAAf,8BACA,eAAChJ,EAAA,EAAD,CAAME,MAAI,EAAC8I,GAAI,EAAf,SAAmBjL,EAAK5D,KAAK8H,MAAMgH,WAEvC,kDACA,eAAC3B,GAAA,EAAD,CAAWpN,KAAK,WAAWsI,QAAQ,WAAW/F,MAAM,gBAAgB8F,WAAS,EAAC1F,KAAK,UACnF,eAACyK,GAAA,EAAD,CAAWpN,KAAK,WAAWsI,QAAQ,WAAW/F,MAAM,qBAAqB8F,WAAS,EAAC1F,KAAK,c,6DCuCrFqM,GA1DQ,WAEnB,MAA8BzL,YAAY7D,GAA1C,mBAAOuP,EAAP,KAAmBC,EAAnB,KACM/L,EAAWC,cAEjB,EAA6BC,mBAAS,CAAE8L,QAAQ,EAAOpC,UAAU,IAAjE,mBAAQqC,EAAR,KAAgBC,EAAhB,KAEMC,EAAY,uCAAG,WAAOlL,GAAP,eAAA6F,EAAA,yDACjB7F,EAAEmD,iBAOgB,MANZgI,EAAO,CACT1L,KAAMO,EAAEG,OAAOV,KAAKvB,MACpByK,SAAU3I,EAAEG,OAAOwI,SAASzK,MAC5BwB,KAAMM,EAAEG,OAAOT,KAAKxB,MACpByM,MAAO3K,EAAEG,OAAOwK,MAAMzM,QAEjBuB,KARQ,gBASbwL,EAAU,2BAAMD,GAAP,IAAeD,QAAQ,KATnB,0BAUY,KAAlBI,EAAKxC,UAAmBwC,EAAKxC,WAAa3I,EAAEG,OAAOiL,UAAUlN,MAVvD,iBAWb+M,EAAU,2BAAMD,GAAP,IAAerC,UAAU,KAXrB,mDAeHkC,EAAW,CAAEzL,UAAW+L,IAfrB,QAgBTpM,EAASrD,GAAgB,kCAAmC,YAhBnD,mDAkBTqD,EAASrD,GAAgB,8BAAgC,KAAEC,QAAS,UAlB3D,2DAAH,sDAsBlB,OAAImP,EAAOlN,QACC,mDAERkN,EAAO3E,SAAW2E,EAAOO,MACjB,eAAC,IAAD,CAAUpF,GAAG,WAGrB,iCACI,6CACA,8CACA,uBAAM/C,SAAUgI,EAAhB,SACI,gBAACzH,GAAA,EAAD,WACI,eAACnB,GAAA,EAAD,UAAU,eAAC0G,GAAA,EAAD,CAAWqC,MAAOL,EAAOD,OAAQrL,KAAK,OAAOvB,MAAM,SAAS+F,QAAQ,WAAWD,WAAS,MAClG,eAAC3B,GAAA,EAAD,UAAU,eAAC0G,GAAA,EAAD,CAAWqC,MAAOL,EAAOrC,SAAUjJ,KAAK,WAAW9D,KAAK,WAAWuC,MAAM,WAAW+F,QAAQ,WAAWD,WAAS,MAC1H,eAAC3B,GAAA,EAAD,UAAU,eAAC0G,GAAA,EAAD,CAAWqC,MAAOL,EAAOrC,SAAUjJ,KAAK,YAAYvB,MAAM,qBAAqBvC,KAAK,WAAWsI,QAAQ,WAAWD,WAAS,MACrI,eAACT,EAAA,EAAD,CAAShF,MAAO,CAAE2F,UAAW,UAC7B,gDACA,eAACmH,GAAA,EAAD,uGAGA,eAAChJ,GAAA,EAAD,UAAU,eAAC0G,GAAA,EAAD,CAAWtJ,KAAK,OAAOvB,MAAM,OAAO+F,QAAQ,WAAWD,WAAS,MAC1E,eAAC3B,GAAA,EAAD,UAAU,eAAC0G,GAAA,EAAD,CAAWtJ,KAAK,QAAQvB,MAAM,mBAAa+F,QAAQ,WAAWD,WAAS,MACjF,eAAC3B,GAAA,EAAD,UAAU,eAAC0B,EAAA,EAAD,CAAQpI,KAAK,SAAS2C,KAAK,QAAQ2F,QAAQ,YAAYD,WAAS,EAAC3F,MAAM,UAAvE,mCC3CfiN,GAbI,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,QAAShM,EAAW,EAAXA,KAEzBtD,EAAaqP,EAAKnK,QAAQyG,MAAK,SAAAvG,GAAC,OAAIA,EAAE9B,KAAKA,OAASA,KAApDtD,SACFC,EAAUF,GAAaC,GAE7B,OACI,gBAACmI,GAAA,EAAD,CAAO9F,MAAO,CAACC,QAAS,MAAOiN,aAAa,OAAQpC,UAAW,EAA/D,UACMxM,GAAiB0O,EAAKG,WAD5B,IAC0CvP,EACtC,eAAC4H,EAAA,EAAD,CAAQzF,KAAK,QAAQuD,QAAS,kBAAM2J,EAAQD,EAAKzK,KAAjD,yBC2BG6K,GA/BK,WAEhB,IAAMlE,EAAW7E,aAASzH,GACpBqE,EAAOX,aAAY,SAAA/C,GAAK,OAAIA,EAAM0D,QAClCV,EAAWC,cAEXyM,EAAU,SAACI,GACb9M,EAAS,CAAEnD,KAAM,SAAUC,KAAM,CAAEwD,QAASwM,MAGhD,OAAKpM,EAAKA,KAMNiI,EAAS9J,QAEL,eAACsI,EAAA,EAAD,CAAUzD,MAAM,EAAhB,SACI,eAAC1E,EAAA,EAAD,OAIZkC,QAAQC,IAAIwH,GAER,iCACI,+CACCA,EAAS7L,KAAK6L,SAASpG,KAAI,SAAAuK,GAAC,OAAI,eAAC,GAAD,CAAYpM,KAAMA,EAAKA,KAAMgM,QAASA,EAASD,KAAMK,GAAQA,EAAE9K,WAfhG,eAAC,IAAD,CAAUkF,GAAG,YCyEzB,IAAM6F,GAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACE,eAACC,GAAA,EAAD,CAAQC,SAAS,SAAjB,SACA,gBAACC,GAAA,EAAD,WACE,eAACrK,EAAA,EAAD,CAAYsK,KAAK,QAAQrK,QAASiK,EAAlC,SACE,eAAC,KAAD,MAEF,eAACK,GAAA,EAAD,CAAYlI,QAAQ,KAAK1F,MAAO,CAAE6N,SAAU,GAA5C,4BAQSC,GArFf,WAEE,MAAgCrN,oBAAS,GAAzC,mBAAO8H,EAAP,KAAiBC,EAAjB,KACMjI,EAAWC,cACXS,EAAOX,aAAY,SAAA/C,GAAK,OAAIA,EAAM0D,QAExC,EAAuBgG,YAAavK,GAApC,mBAAOyI,EAAP,KAAc4I,EAAd,KAsBA,OAjBAvL,qBAAU,YACS,WACf,IAAMwL,EAAQhE,aAAaiE,QAAQ,aACnCxM,QAAQC,IAAIsM,GACZvM,QAAQC,IAAIT,GACR+M,IAAU/M,EAAKA,QACZ8M,EAAM3O,SAAW2O,EAAM1Q,MAC1BoE,QAAQC,IAAIqM,GACZxN,EAAUiJ,GAAQuE,EAAM1Q,KAAK8H,MAAMjE,KAAM6M,EAAM1Q,KAAK8H,MAAMlE,SAElC,IAAjB8M,EAAMpG,QACbxC,KAIN+I,KACC,CAACH,IAEF,iCAEE,eAAC,GAAD,CAASR,SAvBI,WACf/E,GAAY,MAwBV,eAAC,GAAD,CAAUD,SAAUA,EAAUC,YAAaA,IAC3C,eAAC,GAAD,IACA,eAACsE,GAAA,EAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOqB,KAAK,WAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,cAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,eAAC,GAAD,MAEF,gBAAC,IAAD,CAAOA,KAAK,IAAZ,UACE,0CACA,gECtENC,GAAcC,QACW,cAA7BtE,OAAOuE,SAASC,UAEe,UAA7BxE,OAAOuE,SAASC,UAEhBxE,OAAOuE,SAASC,SAASC,MAAM,2DAqCnC,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTtE,MAAK,SAAC2E,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1R,QACfqR,UAAUC,cAAcO,YAI1B3N,QAAQC,IACN,+GAKEiN,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBtN,QAAQC,IAAI,sCAGRiN,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BlN,OAAM,SAACgL,GACNpL,QAAQoL,MAAM,4CAA6CA,M,kFCxElDvP,GArBC,WAAgD,IAA/CC,EAA8C,uDAAtC,CAAC6C,MAAO,EAAGS,QAAS,MAAOpD,EAAW,uCAC3D,OAAOA,EAAOL,MACV,IAAK,YACD,OAAIG,EAAM6C,MAAQ,GACP,2BAAI7C,GAAX,IAAkB6C,MAAO7C,EAAM6C,MAAQ,IAC/B7C,EAChB,IAAK,YACD,OAAIA,EAAM6C,OAAS,EACR,2BAAI7C,GAAX,IAAkB6C,MAAO7C,EAAM6C,MAAQ,IAC/B7C,EAChB,IAAK,SACD,OAAO,2BAAKA,GAAZ,IAAmBsD,QAASpD,EAAOJ,KAAKwD,UAC5C,IAAK,aACD,OAAOpD,EAAOJ,KAClB,IAAK,cACD,MAAO,CAAE+C,MAAO,EAAGS,QAAS,MAChC,QACI,OAAOtD,ICbbgS,GAAWC,aAAgB,CAC7B7R,SAAU8R,GACVxO,KAAMyO,GACNzH,aAAc0H,KAKHC,GAFDC,aAAYN,ICa1B,IAAMO,GAAW,IAAIC,KAAS,CAAEC,IANhB,2CAQVC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BpC,EAAQhE,aAAaiE,QAAQ,aACnC,MAAO,CACLmC,QAAQ,2BACHA,GADE,IAELC,cAAerC,EAAK,iBAAaA,GAAU,WAK3CsC,GAAa,IAAIC,KAAc,CACnCP,IAA+E,uCAC/EQ,QAAS,CACPC,WAAW,KAITC,GAAYC,kBAChB,YAAgB,IAAbhO,EAAY,EAAZA,MACKiO,EAAaC,aAAkBlO,GACrC,MACsB,wBAApBiO,EAAWE,MACc,iBAAzBF,EAAWG,YAGfT,GACAL,GAASe,OAAOlB,KAIZ5N,GAAS,IAAI+O,KAAa,CAC9BC,MAAO,IAAIC,KACXC,KAAMV,GACNW,mBAAmB,IAGrBC,IAASC,OACP,eAACC,GAAA,EAAD,CAAgBtP,OAAQA,GAAxB,SACE,eAAC,IAAD,CAAU0N,MAAOA,GAAjB,SACE,eAAC,IAAD,UACE,eAAC,GAAD,UAIN6B,SAASC,eAAe,SHlDnB,SAAkB/C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+C,IAAIC,GAAwB7H,OAAOuE,SAASuD,MACpDC,SAAW/H,OAAOuE,SAASwD,OAIvC,OAGF/H,OAAOgI,iBAAiB,QAAQ,WAC9B,IAAMrD,EAAK,UAAMkD,GAAN,sBAEPxD,KAgEV,SAAiCM,EAAOC,GAEtCqD,MAAMtD,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BhG,MAAK,SAAC6H,GAEL,IAAMC,EAAcD,EAAS7B,QAAQ+B,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzD,UAAUC,cAAcyD,MAAMlI,MAAK,SAAC2E,GAClCA,EAAawD,aAAanI,MAAK,WAC7BL,OAAOuE,SAASkE,eAKpB/D,GAAgBC,EAAOC,MAG1B9M,OAAM,WACLJ,QAAQC,IAAI,oEAtFV+Q,CAAwB/D,EAAOC,GAI/BC,UAAUC,cAAcyD,MAAMlI,MAAK,WACjC3I,QAAQC,IACN,+GAMJ+M,GAAgBC,EAAOC,OG4B/B+D,K","file":"static/js/main.2d0593f6.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\nexport const CARD_CHANGED = gql`\r\n    subscription changedCard( $roundId: String!) {\r\n        changedCard( roundId: $roundId) {\r\n            data {\r\n                tulokset\r\n                user { user name }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const LOGIN = gql`\r\n    mutation login($user: String!, $password: String!) {\r\n        login(\r\n            user: $user\r\n            password: $password\r\n        ) {\r\n            value\r\n            user { user name }\r\n        }\r\n    }\r\n\r\n\r\n`\r\nexport const END_GAME = gql`\r\n    mutation endGame ($id: String!) {\r\n        finishGame(\r\n            roundId: $id\r\n        )\r\n    }\r\n`\r\nexport const GET_ME = gql`\r\n    query getMe {\r\n        getMe{\r\n           name\r\n           user\r\n           friends { user name id }\r\n           friendRequests { user name id }\r\n        }\r\n    }\r\n`\r\nexport const CREATE_GAME = gql`\r\n    mutation createGame ($pelaajat: [String]) {\r\n        createGame(\r\n            pelaajat: $pelaajat\r\n        )\r\n    }\r\n`\r\nexport const GET_GAMES = gql`\r\n    query getGames {\r\n        getGames {\r\n            finished\r\n            timestamp\r\n            id\r\n            players{ tulokset user{user name}}\r\n        }\r\n    }\r\n`\r\nexport const SET_SCORE = gql`\r\n    mutation setScore($roundId: String!, $round: ID!, $player: String!, $score: Int!) {\r\n        setScore(\r\n            roundId: $roundId\r\n            round: $round\r\n            player: $player\r\n            score: $score\r\n        ) {\r\n            finished\r\n            timestamp\r\n            players {\r\n                user { user }\r\n                tulokset\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const CREATE_USER = gql`\r\n    mutation createUser($user: String!, $password: String!, $name: String, $email: String) {\r\n        createUser(\r\n            user: $user\r\n            password: $password\r\n            name: $name\r\n            email: $email\r\n        ) {\r\n            user\r\n        }\r\n    }\r\n`\r\nexport const GET_ROUND = gql`\r\n    query getRound($roundId: String!) {\r\n        getRound(\r\n            roundId: $roundId\r\n        ) {\r\n            finished\r\n            timestamp\r\n            id\r\n            players {\r\n                user { user name }\r\n                tulokset\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const ANSWER_FRIEND_REQUEST = gql`\r\n    mutation handleFriendRequest($friendId: String!, $answer: Boolean!) {\r\n        handleFriendRequest(\r\n            friendId: $friendId\r\n            action: $answer\r\n        )\r\n    }\r\n`\r\nexport const SEND_FRIEND_REQUEST = gql`\r\n    mutation sendFriendRequest($name: String!) {\r\n        sendFriendRequest(\r\n            fName: $name\r\n        )\r\n    }\r\n`","const reducer = (state = { alive: false}, action) => {\r\n    switch(action.type) {\r\n        case 'SET_NOTIFICATION':\r\n            return {\r\n                message: action.data.message,\r\n                type: action.data.type,\r\n                alive: true\r\n            }\r\n        case 'KILL_NOTIFICATION':\r\n           return { ...state, alive:false }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setNotification = (message, type) => {\r\n    return {\r\n        type: 'SET_NOTIFICATION',\r\n        data: {\r\n            type,\r\n            message,\r\n        }\r\n    }\r\n}\r\nexport const killNotification = () => {\r\n    return {\r\n        type: 'KILL_NOTIFICATION',\r\n        data: {}\r\n    }\r\n}\r\nexport default reducer;","\r\nexport const laskePisteet = (tulokset) => {\r\n\r\n    let pisteet = 0\r\n    let dist = 10\r\n    for (var i = 0; i < tulokset.length; i++ ) {\r\n        if (tulokset[i] === null) return pisteet\r\n        pisteet += tulokset[i]*dist\r\n        dist = 5+tulokset[i]\r\n    }\r\n    return pisteet\r\n}\r\n\r\nexport const tulokset2ChartData = (tulokset = [], palautus = [\r\n        { dist: '5m', putteja: 0, puttejaSisaan: 0, prossa: 0 },\r\n        { dist: '6m', putteja: 0, puttejaSisaan: 0, prossa: 0 },\r\n        { dist: '7m', putteja: 0, puttejaSisaan: 0, prossa: 0 },\r\n        { dist: '8m', putteja: 0, puttejaSisaan: 0, prossa: 0},\r\n        { dist: '9m', putteja: 0, puttejaSisaan: 0, prossa: 0},\r\n        { dist: '10m', putteja: 0, puttejaSisaan: 0, prossa: 0 } ]) => {\r\n\r\n    for (let i=0; i < tulokset.length; i++) {\r\n        if (tulokset[i] === null) return\r\n        const etaisyys = (i !== 0) ? tulokset[i-1] : 5\r\n\r\n        palautus[etaisyys].putteja += 5\r\n        palautus[etaisyys].puttejaSisaan += tulokset[i]\r\n        palautus[etaisyys].prossa = palautus[etaisyys].puttejaSisaan / palautus[etaisyys].putteja * 100\r\n    }\r\n    return palautus\r\n}\r\nexport const timestamp2String = (ts) => {\r\n    let aika = new Date(0)\r\n    aika.setUTCMilliseconds(ts)\r\n    const tunti = aika.getHours()+aika.getTimezoneOffset()/60\r\n    const minsat = aika.getMinutes()\r\n    return aika.getDate() + \".\" + (aika.getMonth()+1) + \".\" + aika.getFullYear() + \" \" + \r\n        ((tunti < 10) ? '0'+tunti : tunti) + \":\" + \r\n        ( (aika.getMinutes() < 10) ? '0'+minsat : minsat)\r\n}","import { useMutation } from \"@apollo/client\"\r\nimport { CircularProgress, FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { SET_SCORE, GET_ROUND } from \"../queries\"\r\nimport { setNotification } from \"../reducers/notificationReducer\"\r\n\r\nimport { laskePisteet } from '../utils/stuff'\r\n\r\nconst Player = ({ player, round }) => {\r\n\r\n    const roundData = useSelector(state => state.tulokset)\r\n    const dispatch = useDispatch()\r\n\r\n    const [loading, setLoading] = useState(null)\r\n\r\n    const [setScore] = useMutation(SET_SCORE, { variables: { roundId: roundData.roundId } })\r\n\r\n    const handleChange = (e) => {\r\n        console.log('Clickkiä arvoon ', e.target.value)\r\n        setLoading(e.target.value)\r\n        setScore({\r\n            variables: {\r\n                roundId: roundData.roundId,\r\n                round: roundData.round,\r\n                player: player.user.user,\r\n                score: Number(e.target.value)\r\n            }\r\n        }).catch(e => {\r\n            dispatch(setNotification(e.message, 'error'))\r\n        }).finally(() => {\r\n            setLoading(null)\r\n            if (round > 0 && !player.tulokset[round-1] )\r\n                dispatch( setNotification('Kierroksen ' + round + ' tulos puuttuu', 'warning'))\r\n        })\r\n    }\r\n    const distance = (round > 0) ? 5 + player.tulokset[round - 1] : 10\r\n    const pisteet = laskePisteet(player.tulokset)\r\n    let putteja = player.tulokset[round]\r\n    if (isNaN(putteja)) putteja = null\r\n    return (\r\n        <div>\r\n            <h2>{player.user.name} {(distance) ? distance : ' xx '}m - {pisteet}</h2>\r\n            <div className=\"tulosValitsin\">\r\n                <RadioGroup row style={{ whiteSpace: 'nowrap' }} value={putteja} onChange={handleChange}>\r\n                    <RadioButtons loading={loading} />\r\n                </RadioGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst RadioButtons = ({ loading }) => {\r\n    const palautus = []\r\n    var i\r\n    for (i = 0; i < 6; i++) {\r\n        if (loading && i === Number(loading)) {\r\n            palautus.push(<CircularProgress />)\r\n        }\r\n        else {\r\n            palautus.push(\r\n                <FormControlLabel\r\n                    labelPlacement=\"top\"\r\n                    key={i}\r\n                    value={i}\r\n                    label={i}\r\n                    control={\r\n                        <Radio color=\"primary\" size=\"small\"\r\n                            style={{ padding: '0px' }}\r\n                        />}\r\n                />)\r\n        }\r\n    }\r\n    return palautus;\r\n}\r\n\r\nexport default Player","import { Grid, IconButton } from '@material-ui/core'\r\nimport { ChevronLeft, ChevronRight } from '@material-ui/icons'\r\nimport { useDispatch } from 'react-redux'\r\nimport Player from './Player'\r\n\r\nimport { useSubscription, useApolloClient } from '@apollo/client'\r\nimport { CARD_CHANGED, GET_ROUND } from '../queries'\r\n\r\nimport { useEffect } from 'react'\r\n\r\nconst Tulosruutu = ({ kierrosData, tulokset }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const kierros = tulokset.round\r\n\r\n    const client = useApolloClient()\r\n    const pushed = useSubscription(CARD_CHANGED, { variables: { roundId: kierrosData.data.getRound.id } })\r\n\r\n    useEffect(() => {\r\n        if (!pushed.loading) {\r\n            console.log(pushed)\r\n            const dataMuistissa = client.readQuery({ query: GET_ROUND, variables: { roundId: kierrosData.data.getRound.id } })\r\n            console.log('MUISTI: ', dataMuistissa)\r\n\r\n            if (dataMuistissa !== null) {\r\n\r\n                const updatedGetRound = {\r\n                    ...dataMuistissa.getRound,\r\n                    players: dataMuistissa.getRound.players.map(p =>\r\n                        (p.user.user === pushed.data.changedCard.data.user.user)\r\n                            ? pushed.data.changedCard.data\r\n                            : p\r\n                    )\r\n                }\r\n                console.log('PÄIVITETTY: ', updatedGetRound)\r\n                client.writeQuery({\r\n                    query: GET_ROUND,\r\n                    variables: { roundId: kierrosData.data.getRound.id },\r\n                    data: {\r\n                        getRound: {\r\n                            ...dataMuistissa.getRound,\r\n                            players: dataMuistissa.getRound.players.map(p =>\r\n                                (p.user.user === pushed.data.changedCard.data.user.user)\r\n                                    ? pushed.data.changedCard.data\r\n                                    : p\r\n                            )\r\n                        }\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n        }\r\n    }, [pushed])\r\n\r\n    return (\r\n        <div>\r\n            <Grid container className=\"rundiValitsin\">\r\n                <Grid item ><IconButton onClick={() => dispatch({ type: 'DEC_ROUND' })}><ChevronLeft /></IconButton></Grid>\r\n                <Grid item component={'h2'}>Round {kierros + 1}</Grid>\r\n                <Grid item><IconButton onClick={() => dispatch({ type: 'INC_ROUND' })}><ChevronRight /></IconButton></Grid>\r\n            </Grid>\r\n            {kierrosData.data.getRound.players.map(p => <Player key={p.user.id + 'ppp'} player={p} round={kierros} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tulosruutu","import { useQuery } from \"@apollo/client\"\r\nimport { Button, Checkbox, Divider, FormControlLabel, InputLabel, List, ListItem, Modal, Select } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { GET_ME } from \"../queries\"\r\n\r\nconst NewGameModal = ({ open, setModal, handleNewGame }) => {\r\n\r\n    const mina = useQuery( GET_ME )\r\n    const [ pelaajat, setPelaajat ] = useState([])\r\n\r\n    if (mina.loading) {\r\n        return (\r\n            <h2>Loading stuff...</h2>\r\n        )\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        handleNewGame( pelaajat )\r\n    }\r\n    const handleClick = (pelaaja) => {\r\n        if (pelaajat.includes(pelaaja.id)) {\r\n            setPelaajat( pelaajat.filter( p => p !== pelaaja.id ))\r\n        } else {\r\n            setPelaajat( [...pelaajat, pelaaja.id] )\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal\r\n                open={open}\r\n                onClose={() => setModal(false)}\r\n            >\r\n                <div className=\"newGameModal\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <h2>Uusi peli</h2>\r\n                        <div>\r\n                            <InputLabel htmlFor=\"age-native-simple\">Pelimoodi</InputLabel>\r\n                            <Select native>\r\n                                <option value={0}>Normaali</option>\r\n                            </Select>\r\n                        </div>\r\n                        <Divider />\r\n                        <div>\r\n                            <h3>Pelaajat</h3>\r\n                            <List>\r\n                            <ListItem>\r\n                                <FormControlLabel control={<Checkbox checked />} label=\"Minä\" />\r\n                            </ListItem>\r\n                            <Kaverivalinta kaverit={mina.data.getMe.friends} handleClick={handleClick} />\r\n                            </List>\r\n                            <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Aloita</Button>\r\n                            <Button fullWidth onClick={() => setModal(false)} variant=\"contained\" color=\"secondary\" style={{ marginTop: '5px' }}>Kansel</Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Kaverivalinta = ({ kaverit, handleClick }) => {\r\n    return (\r\n        kaverit.map(k => <ListItem key={k.id}><FormControlLabel control={<Checkbox onChange={() => handleClick(k)} />} label={k.user} /></ListItem>)\r\n    )\r\n}\r\n\r\nexport default NewGameModal","import { Paper } from '@material-ui/core'\r\nimport { ValueAxis, Chart, Title, BarSeries, ArgumentAxis } from '@devexpress/dx-react-chart-material-ui'\r\nimport { Animation } from '@devexpress/dx-react-chart'\r\n\r\nconst BarChart = ({ data, otsikko=''}) => {\r\n    return (\r\n        <Paper>\r\n            <Chart data={data} height='250'>\r\n                <Title text={otsikko} />\r\n                <ArgumentAxis />\r\n                <ValueAxis min={0} max={100} />\r\n                <BarSeries\r\n                    argumentField=\"dist\"\r\n                    valueField=\"prossa\"\r\n                />\r\n                <Animation />\r\n            </Chart>\r\n        </Paper>\r\n    )\r\n\r\n}\r\nexport default BarChart","import { statistiikat, tulokset2ChartData } from \"../utils/stuff\"\r\n\r\nimport BarChart from '../components/BarChart'\r\n\r\nconst PlayerStats = ({ player }) => {\r\n\r\n    const statsit = tulokset2ChartData(player.tulokset)\r\n    return (\r\n        <div>\r\n            <BarChart data={statsit} />\r\n        </div>\r\n    )\r\n}\r\nexport default PlayerStats","\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        hidden={value !== index}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n            children\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  export default TabPanel\r\n  ","import { useMutation, useLazyQuery } from '@apollo/client'\r\nimport { Button, AppBar, Divider, CircularProgress } from '@material-ui/core'\r\nimport { Tabs, Tab, Backdrop } from '@material-ui/core'\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CREATE_GAME, GET_ROUND, END_GAME } from '../queries'\r\nimport Tulosruutu from './Tulosruutu'\r\nimport NewGameModal from './NewGameModal'\r\nimport PlayerStats from './PlayerStats'\r\nimport { Redirect } from 'react-router'\r\nimport TabPanel from './TabPanel'\r\n\r\nconst Peli = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [modalOpen, setModal] = useState(false)\r\n    const [tabValue, setTabValue] = useState(0)\r\n\r\n    const tulokset = useSelector(state => state.tulokset)\r\n    const user = useSelector(state => state.user)\r\n\r\n    const [haeRundi, kierrosData] = useLazyQuery(GET_ROUND)\r\n\r\n    const [uusiPeli] = useMutation(CREATE_GAME)\r\n    const [paataPeli] = useMutation(END_GAME)\r\n\r\n    const handleNewGame = async (pelaajat) => {\r\n\r\n        const res = await uusiPeli({ variables: { pelaajat: pelaajat } })\r\n\r\n        dispatch({ type: 'SET_ID', data: { roundId: res.data.createGame } })\r\n        setModal(false);\r\n    }\r\n    const handleEndGame = async () => {\r\n\r\n        try {\r\n            await paataPeli( { variables: { id: tulokset.roundId }})\r\n        } catch (e) {\r\n            console.log('Virhe pelin päättämisessä. ' + e.message)\r\n        }\r\n        return (\r\n            <Redirect to=\"/pelit\" />\r\n        )\r\n\r\n    }\r\n    if (!user.user) {\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n    }\r\n    if (kierrosData.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n            \r\n        )\r\n    }\r\n    if (!kierrosData.called && tulokset.roundId)\r\n        haeRundi({ variables: { roundId: tulokset.roundId } });\r\n    if (tulokset.roundId === null || !kierrosData.data) {\r\n        return (\r\n            <div>\r\n                <h2>Pakko päästä puttaa</h2>\r\n                <p>\r\n                    Ei aktiivista peliä käynnissä. Aloita joko uusi peli tai jatkaa vanhaa peliä.\r\n                </p>\r\n                <p>\r\n                    Vanhan pelin jatkaminen onnistuu aktivoimalla se 'Vanhat peli' -osiosta.\r\n                </p>\r\n                <Button onClick={() => setModal(true)} color=\"primary\" variant=\"contained\" size=\"large\" fullWidth>Aloita uusi peli</Button>\r\n\r\n                <NewGameModal open={modalOpen} setModal={setModal} handleNewGame={handleNewGame} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n                <Tabs\r\n                    value={tabValue}\r\n                    onChange={(event, uusi) => setTabValue(uusi)}\r\n                    variant=\"fullWidth\"\r\n                >   \r\n\r\n                    <Tab label=\"Peli\" />\r\n                    <Tab label=\"Asetukset\" />\r\n                    <Tab label=\"Statsit\" />\r\n                </Tabs>\r\n            <TabPanel value={tabValue} index={0}>\r\n                <Tulosruutu kierrosData={kierrosData} tulokset={tulokset}/>\r\n            </TabPanel>\r\n            <TabPanel value={tabValue} index={1}>\r\n                <h2>Mitä tehdään?</h2>\r\n                <h3>Poistu pelistä</h3>\r\n                <p>\r\n                    Poistu päävalikkoon. Peli on tallennettu ja tulosten merkkaamista voi jatkaa.\r\n                </p>\r\n                <Button size=\"large\" onClick={() => dispatch({ type: 'RESET_ROUND' })} variant=\"contained\" color=\"primary\" fullWidth>Poistu pelistä</Button>\r\n                <Divider  style={{ marginTop: '15px'}}/>\r\n                <h3>Päätä peli</h3>\r\n                <p>\r\n                    Peli päätetään. Tulosten kirjaaminen suljetaan.\r\n                </p>\r\n                <Button onClick={handleEndGame} size=\"large\" variant=\"contained\" color=\"primary\" fullWidth>Päätä peli</Button>\r\n                <Divider  style={{ marginTop: '15px'}}/>\r\n                <h3>Hylkää peli</h3>\r\n                <p>\r\n                    Kaikki tuhotaan.\r\n                </p>\r\n                <Button size=\"large\" variant=\"contained\" color=\"primary\" fullWidth>Tuhoa maailma</Button>\r\n            </TabPanel>\r\n            <TabPanel value={tabValue} index={2}>\r\n                {kierrosData.data.getRound.players.map(p => <PlayerStats player={p} key={'ps'+p.user.id} />)}\r\n            </TabPanel>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Peli;","import { killNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport Alert from '@material-ui/lab/Alert'\r\n\r\nconst Notification = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const notification = useSelector(state => state.notification)\r\n\r\n    const handleClose = () => {\r\n        dispatch(killNotification())\r\n    }\r\n    return (\r\n        <div>\r\n            <Snackbar open={notification.alive} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert severity={notification.type} variant=\"filled\">\r\n                    {notification.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nexport default Notification","import { ChevronLeft } from '@material-ui/icons';\r\nimport { Drawer, Divider, List, ListItem, IconButton } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Vetomenu = ({ menuOpen, setMenuOpen }) =>  {\r\n    \r\n    const user = useSelector(state => state.user)\r\n    const notLogged = (!user.user)\r\n    return (\r\n    <Drawer\r\n        open={menuOpen}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n    >\r\n        <IconButton onClick={() => setMenuOpen(false)}>\r\n            <ChevronLeft />\r\n        </IconButton>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button component={Link} to=\"/\" onClick={() => setMenuOpen(false)}>\r\n                Etusivu\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/peli\" onClick={() => setMenuOpen(false)}>\r\n                Uusi peli\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/vanhat\" onClick={() => setMenuOpen(false)}>\r\n                Vanhat pelit\r\n            </ListItem>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/stats\" onClick={() => setMenuOpen(false)}>\r\n                Statistiikka\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/kaverit\" onClick={() => setMenuOpen(false)}>\r\n                Kaverit\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem component={Link} to=\"/asetukset\" disabled={notLogged} button onClick={() => setMenuOpen(false)}>\r\n                Asetukset\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/createUser\" onClick={() => setMenuOpen(false)}>\r\n                Luo tunnus\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/login\" onClick={() => setMenuOpen(false)}>\r\n                Kirjaudu sisään\r\n            </ListItem>\r\n\r\n        </List>\r\n    </Drawer>\r\n)}\r\nexport default Vetomenu;","import { useQuery } from '@apollo/client'\r\nimport { ArgumentAxis, ValueAxis, LineSeries, Chart, Title } from '@devexpress/dx-react-chart-material-ui'\r\nimport { Backdrop, CircularProgress, Paper, Grid } from '@material-ui/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { GET_GAMES } from '../queries'\r\nimport { laskePisteet, tulokset2ChartData } from '../utils/stuff'\r\nimport BarChart from './BarChart'\r\nimport { Animation } from '@devexpress/dx-react-chart'\r\n\r\n\r\nconst Statsit = () => {\r\n\r\n    const statsRawData = useQuery(GET_GAMES)\r\n    const user = useSelector(state => state.user)\r\n\r\n    if (statsRawData.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    const statsData = statsRawData.data.getGames\r\n    let kaikkiPuttiProssat = tulokset2ChartData()\r\n    let kaikkiPisteet = []\r\n    let maxPisteet = 0\r\n    for (let i = 0; i < statsData.length; i++) {\r\n        const player = statsData[i].players.find(p => p.user.user === user.user)\r\n        kaikkiPuttiProssat = tulokset2ChartData(player.tulokset, kaikkiPuttiProssat)\r\n        const pisteet = laskePisteet(player.tulokset)\r\n        if (pisteet > maxPisteet) maxPisteet = pisteet\r\n        kaikkiPisteet.push({ game: i, score: pisteet })\r\n    }\r\n    console.log(kaikkiPisteet)\r\n\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Grid>\r\n                    <Grid>\r\n                        Pelejä: {statsData.length}\r\n                    </Grid>\r\n                    <Grid>\r\n                        Paras tulos: {maxPisteet}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <BarChart data={kaikkiPuttiProssat} otsikko=\"Puttiprossat\" />\r\n\r\n            <Chart data={kaikkiPisteet} height='200'>\r\n                <Title text=\"Pisteet\" />\r\n                <ArgumentAxis />\r\n                <ValueAxis />\r\n                <LineSeries\r\n                    argumentField=\"game\"\r\n                    valueField=\"score\"\r\n                />\r\n                <Animation />\r\n            </Chart>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statsit","\r\nconst reducer = (state = {}, action ) => {\r\n    switch(action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                user: action.data.user,\r\n                name: action.data.name\r\n            }\r\n        case 'CLEAR_USER':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setUser = (name, user) => {\r\n    return {\r\n        type: 'SET_USER',\r\n        data: {\r\n            user,\r\n            name\r\n            \r\n        }\r\n    }\r\n}\r\nexport const clearUser = () => {\r\n    return {\r\n        type: 'CLEAR_USER',\r\n        data: {}\r\n    }\r\n}\r\nexport default reducer","import { useState } from 'react'\r\nimport { Button, TextField, List, ListItem, Backdrop, CircularProgress } from '@material-ui/core'\r\nimport { useApolloClient, useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries'\r\nimport { setUser, clearUser } from '../reducers/userReducer'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst LoginForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(state => state.user);\r\n\r\n    const [loginProcess, setLoginProcess] = useState(false)\r\n    const [ login ] = useMutation( LOGIN );\r\n    const client = useApolloClient()\r\n\r\n    const handleLogout = async (e) => {\r\n        await client.clearStore()\r\n        window.localStorage.clear()\r\n        dispatch( clearUser() );\r\n        dispatch( { type: 'RESET_ROUND' })\r\n    }\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault()\r\n        setLoginProcess(true);\r\n        login({ variables: { user: e.target.user.value, password: e.target.password.value }}).then(result => {\r\n            window.localStorage.setItem('rageToken', result.data.login.value)\r\n            console.log('Login data: ', result.data.login)\r\n            const sailo = setUser(result.data.login.user.name, result.data.login.user.user);\r\n            dispatch(sailo);\r\n            setLoginProcess(false);\r\n        }).catch(e => {\r\n            dispatch( setNotification('Väärä tunnus tai salasana', 'error'))\r\n            setLoginProcess(false);\r\n        })\r\n    }\r\n    console.log(user)\r\n    if (user.user) {\r\n        return (\r\n            <div>\r\n                <h1>Kirjautunut</h1>\r\n                <p>Olet kirjautunut {user.user}:na</p>\r\n                <Button onClick={handleLogout} variant=\"contained\" color=\"primary\">Kirjaudu ulos</Button>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Backdrop open={loginProcess}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n\r\n            <h1>Kirjaudu sisään</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <List>\r\n                    <ListItem><TextField name=\"user\" label=\"Tunnus\" variant=\"outlined\" fullWidth /></ListItem>\r\n                    <ListItem><TextField name=\"password\" label=\"Salasana\" variant=\"outlined\" type=\"password\" fullWidth /></ListItem>\r\n                    <ListItem><Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">Kirjaudu</Button></ListItem>\r\n                </List>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import { Button, TextField } from '@material-ui/core'\r\n\r\nconst FriendRequestForm = ({ handleSendFriendRequest }) => {\r\n    return (\r\n        <>\r\n        <h2>Lähetä kaveripyyntö</h2>\r\n        <form onSubmit={handleSendFriendRequest}>\r\n        <TextField label=\"Nimi\" variant=\"outlined\" fullWidth name=\"kaveri\" />\r\n        <Button type=\"submit\" variant=\"contained\" fullWidth size=\"large\" color=\"primary\" style={{marginTop: '5px'}}>Lähetä</Button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\nexport default FriendRequestForm","import { IconButton, Paper } from '@material-ui/core'\r\nimport { Cancel, Check } from '@material-ui/icons/'\r\n\r\nconst FriendRequests = ({ pyynnot, handleFriendRequest }) => {\r\n    if (pyynnot.length < 1) {\r\n        return (\r\n            <h3>Ei kaveripyyntöjä</h3>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <h2>Kaveripyynnöt</h2>\r\n            {pyynnot.map(k => <KaveriKortti handleFriendRequest={handleFriendRequest} kaveri={k} key={k.id} />)}\r\n        </>\r\n    )\r\n}\r\nconst KaveriKortti = ({ kaveri, handleFriendRequest }) => {\r\n    return (\r\n        <Paper elevation={2} style={{ paddingLeft: '5px', display: 'inline-block', width: '100%'}}>\r\n            <div style={{float: 'left', paddingTop: '10px', fontWeight: 'bold' }}>\r\n               {kaveri.user} ({kaveri.name})\r\n            </div>\r\n            <div style={{float: 'right' }}>\r\n                <IconButton onClick={() => handleFriendRequest(kaveri.id, true )}>\r\n                    <Check style={{ color: 'green' }} />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleFriendRequest(kaveri.id, false )}>\r\n                    <Cancel style={{ color: 'red' }} />\r\n                </IconButton>\r\n            </div>\r\n\r\n        </Paper>\r\n    )\r\n}\r\nexport default FriendRequests","import { useMutation, useQuery } from \"@apollo/client\"\r\nimport { ANSWER_FRIEND_REQUEST, GET_ME, SEND_FRIEND_REQUEST } from \"../queries\"\r\nimport FriendRequestForm from \"./FriendRequestForm\"\r\nimport FriendRequests from \"./FriendRequests\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst Kaverit = () => {\r\n\r\n    const mina = useQuery(GET_ME)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [ answerFriendRequest ] = useMutation( ANSWER_FRIEND_REQUEST, { refetchQueries: [{ query: GET_ME }] } )\r\n    const [ sendFriendRequest ] = useMutation( SEND_FRIEND_REQUEST)\r\n\r\n    const handleSendFriendRequest = (e) => {\r\n        e.preventDefault()\r\n        sendFriendRequest( { variables: { name: e.target.kaveri.value }} ).then(res => {\r\n            dispatch( setNotification('Kaveripyyntö lähetetty!', 'success'))\r\n        }).catch(e => {\r\n            dispatch( setNotification('Pyyntö epäonnistui: ' + e.message, 'error'))\r\n        })\r\n        e.target.kaveri.value = ''\r\n    }\r\n    const handleFriendRequest = (friendId, answer) => {\r\n        answerFriendRequest( { variables: { friendId, answer }}).then(res => {\r\n            dispatch( setNotification('Kaveripyyntö hyväksytty', 'success'))\r\n        }).catch(e => {\r\n            dispatch( setNotification('Tapahtui virhe: ' + e.message, 'error' ))\r\n        })\r\n    }\r\n    if (mina.loading) {\r\n        return ( <h2>Loading friends...</h2>)\r\n    }\r\n    console.log(mina)\r\n    return (\r\n        <div>\r\n        <h2>Kaverisi</h2>\r\n        <KaveriLista kaverit={mina.data.getMe.friends} />\r\n        <FriendRequests pyynnot={mina.data.getMe.friendRequests} handleFriendRequest={handleFriendRequest} />\r\n        <FriendRequestForm handleSendFriendRequest={handleSendFriendRequest} />\r\n        </div>\r\n    )\r\n\r\n}\r\nconst KaveriLista = ({ kaverit }) => {\r\n    if (kaverit.length < 1) {\r\n        return (<div>Ei kavereita :(</div>)\r\n    }\r\n    return (\r\n        <div> {kaverit.map(k => <li key={k.id}>{k.user} ({k.name})</li>)}</div>\r\n    )\r\n}\r\nexport default Kaverit","import { useQuery } from \"@apollo/client\"\r\nimport { Backdrop, CircularProgress, Grid, TextField, } from \"@material-ui/core\"\r\nimport { GET_ME } from \"../queries\"\r\n\r\nconst Asetukset = () => {\r\n\r\n    const user = useQuery(GET_ME)\r\n    if (user.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Tiedot</h1>\r\n            <Grid container>\r\n                <Grid item xs={6}>Tunnus</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.user}</Grid>\r\n                <Grid item xs={6}>Nimi</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.name}</Grid>\r\n                <Grid item xs={6}>Sähköposti</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.email}</Grid>\r\n            </Grid>\r\n            <h2>Vaihda salasana</h2>\r\n            <TextField type=\"password\" variant=\"outlined\" label=\"Uusi salasana\" fullWidth size=\"small\"/>\r\n            <TextField type=\"password\" variant=\"outlined\" label=\"Salasana uudestaan\" fullWidth size=\"small\"/>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Asetukset","import { useMutation } from \"@apollo/client\"\r\nimport { ListItem, List, Button, TextField, Divider, Container } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { CREATE_USER } from '../queries'\r\nimport { setNotification } from \"../reducers/notificationReducer\"\r\n\r\nconst CreateUserForm = () => {\r\n\r\n    const [createUser, cuData ] = useMutation(CREATE_USER)\r\n    const dispatch = useDispatch()\r\n\r\n    const [ errors, setErrors] = useState({ tunnus: false, password: false })\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const vars = {\r\n            user: e.target.user.value,\r\n            password: e.target.password.value,\r\n            name: e.target.name.value,\r\n            email: e.target.email.value\r\n        }\r\n        if (vars.user === '') {\r\n            setErrors( { ...errors, tunnus: true })\r\n        } else if (vars.password === '' || vars.password !== e.target.password2.value) {\r\n            setErrors( { ...errors, password: true })\r\n        }\r\n        else {\r\n            try {\r\n                await createUser({ variables: vars })\r\n                dispatch(setNotification('Tunnukset luotiin onnistuneesti', 'success'))\r\n            } catch (e) {\r\n                dispatch(setNotification('Virhe tunnusten luonnissa: ' + e.message, 'error'))\r\n            }\r\n        }\r\n    }\r\n    if (cuData.loading) {\r\n        return (<h2>Creating user...</h2>)\r\n    }\r\n    if (cuData.called && !cuData.error) {\r\n        return (<Redirect to=\"/login\" /> )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Luo tunnus</h1>\r\n            <h2>Perustiedot</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <List>\r\n                    <ListItem><TextField error={errors.tunnus} name=\"user\" label=\"Tunnus\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField error={errors.password} name=\"password\" type=\"password\" label=\"Salasana\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField error={errors.password} name=\"password2\" label=\"Salasana uudestaan\" type=\"password\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <Divider style={{ marginTop: '15px' }} />\r\n                    <h2>Lisätiedot</h2>\r\n                    <Container>\r\n                        Ei pakollisia. Sähköpostiosoitteen antaminen mahdollistaa tunnusten palauttamisen.\r\n                    </Container>\r\n                    <ListItem><TextField name=\"name\" label=\"Nimi\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField name=\"email\" label=\"Sähköposti\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><Button type=\"submit\" size=\"large\" variant=\"contained\" fullWidth color=\"primary\">Luo tunnus</Button></ListItem>\r\n                </List>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUserForm","import { Button, Paper } from '@material-ui/core'\r\nimport { laskePisteet, statistiikat, timestamp2String } from '../utils/stuff'\r\n\r\nconst Pelikortti = ({ peli, aktivoi, user }) => {\r\n\r\n    const { tulokset } = peli.players.find(p => p.user.user === user)\r\n    const pisteet = laskePisteet(tulokset)\r\n\r\n    return (\r\n        <Paper style={{padding: '5px', marginBottom:'5px'}} elevation={3}>\r\n            { timestamp2String(peli.timestamp) } {pisteet}\r\n            <Button size=\"small\" onClick={() => aktivoi(peli.id)}>Aktivoi</Button>\r\n        </Paper>\r\n    )\r\n\r\n}\r\nexport default Pelikortti","import { useQuery } from \"@apollo/client\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { GET_GAMES } from \"../queries\"\r\nimport { Backdrop, CircularProgress } from '@material-ui/core'\r\nimport Pelikortti from \"./Pelikortti\"\r\n\r\nconst VanhatPelit = () => {\r\n\r\n    const getGames = useQuery(GET_GAMES)\r\n    const user = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const aktivoi = (g) => {\r\n        dispatch({ type: 'SET_ID', data: { roundId: g }})\r\n    }\r\n\r\n    if (!user.user) {\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n    }\r\n\r\n    if (getGames.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    console.log(getGames)\r\n    return (\r\n        <div>\r\n            <h2>Vanhat pelit</h2>\r\n            {getGames.data.getGames.map(g => <Pelikortti user={user.user} aktivoi={aktivoi} peli={g} key={g.id} />)}\r\n        </div>\r\n    )\r\n}\r\nexport default VanhatPelit","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom'\n\nimport Peli from './Peli';\nimport Notification from './components/Notification'\n\nimport Vetomenu from './components/Vetomenu'\nimport Statsit from './components/Statsit'\nimport LoginForm from './components/LoginForm'\nimport Kaverit from './Kaverit'\nimport Asetukset from './components/Asetukset'\n\nimport { AppBar, Toolbar, IconButton, Typography, Container } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport CreateUserForm from './components/CreateUserForm';\nimport VanhatPelit from './VanhatPelit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GET_ME } from './queries';\nimport { useLazyQuery } from '@apollo/client';\nimport { setUser } from './reducers/userReducer';\n\n\nfunction App() {\n\n  const [menuOpen, setMenuOpen] = useState(false)\n  const dispatch = useDispatch()\n  const user = useSelector(state => state.user)\n\n  const [getMe, gotme] = useLazyQuery(GET_ME)\n\n  const openMenu = () => {\n    setMenuOpen(true)\n  }\n  useEffect(() => {\n    const otaToken = () => {\n      const token = localStorage.getItem('rageToken')\n      console.log(token)\n      console.log(user)\n      if (token && !user.user) {\n        if (!gotme.loading && gotme.data) {\n          console.log(gotme)\n          dispatch( setUser(gotme.data.getMe.name, gotme.data.getMe.user))\n        }\n        else if (gotme.called === false) {\n          getMe()\n        }\n      }\n    }\n    otaToken()\n  }, [gotme])\n  return (\n    <div>\n\n      <YlaMenu openMenu={openMenu} />\n\n      <Vetomenu menuOpen={menuOpen} setMenuOpen={setMenuOpen} />\n      <Notification />\n      <Container>\n        <Switch>\n          <Route path=\"/kaverit\">\n            <Kaverit />\n          </Route>\n          <Route path=\"/login\" >\n            <LoginForm />\n          </Route>\n          <Route path=\"/vanhat\" >\n            <VanhatPelit />\n          </Route>\n          <Route path=\"/peli\">\n            <Peli />\n          </Route>\n          <Route path=\"/stats\">\n            <Statsit />\n          </Route>\n          <Route path=\"/createUser\">\n            <CreateUserForm />\n          </Route>\n          <Route path=\"/asetukset\">\n            <Asetukset />\n          </Route>\n          <Route path=\"/\">\n            <h1>Etusivu</h1>\n            <p>\n              Rageputt is bäk\n            </p>\n          </Route>\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nconst YlaMenu = ({ openMenu }) => {\n  return (\n    <AppBar position=\"static\">\n    <Toolbar>\n      <IconButton edge=\"start\" onClick={openMenu}>\n        <MenuIcon />\n      </IconButton>\n      <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n        RagePutt\n      </Typography>\n    </Toolbar>\n  </AppBar>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst reducer = (state = {round: 0, roundId: null}, action) => {\r\n    switch(action.type) {\r\n        case 'INC_ROUND':\r\n            if (state.round < 19)\r\n                return {...state, round: state.round + 1 }\r\n            else return state;\r\n        case 'DEC_ROUND':\r\n            if (state.round >= 1)\r\n                return {...state, round: state.round - 1 } \r\n            else return state;\r\n        case 'SET_ID':\r\n            return { ...state, roundId: action.data.roundId }\r\n        case 'INIT_ROUND':\r\n            return action.data;\r\n        case 'RESET_ROUND':\r\n            return { round: 0, roundId: null }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers, createStore } from 'redux';\r\nimport tuloksetReducer from './reducers/tuloksetReducer'\r\nimport userReducer from './reducers/userReducer'\r\nimport notificationReducer from './reducers/notificationReducer'\r\n\r\nconst reducers = combineReducers({\r\n    tulokset: tuloksetReducer,\r\n    user: userReducer,\r\n    notification: notificationReducer\r\n})\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { setContext } from 'apollo-link-context'\n\nimport { Provider } from 'react-redux'\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\n\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\nimport store from './store'\n\nlet ApolloUri = 'https://rageputt.herokuapp.com/graphql'\nif (process.env.NODE_ENV !== 'production') {\n  console.log('Development mode selected!')\n  ApolloUri = 'http://localhost:4000/graphql'\n}\n\nconst httpLink = new HttpLink({ uri: ApolloUri })\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('rageToken')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  }\n})\n\nconst socketLink = new WebSocketLink({\n  uri: (process.env.NODE_ENV !== 'production') ? 'ws://localhost:4000/graphql' : 'wss://rageputt.herokuapp.com/graphql',\n  options: {\n    reconnect: true\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  socketLink,\n  authLink.concat(httpLink)\n\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink,\n  connectToDevTools: true\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}