{"version":3,"sources":["queries.js","reducers/notificationReducer.js","utils/stuff.js","Peli/Player.js","Peli/NewGameModal.js","Peli/PlayerStats.js","Peli/TabPanel.js","Peli/index.js","components/Notification.js","components/Vetomenu.js","reducers/userReducer.js","components/LoginForm.js","Kaverit/FriendRequestForm.js","Kaverit/FriendRequests.js","Kaverit/index.js","components/Asetukset.js","components/CreateUserForm.js","VanhatPelit/Pelikortti.js","VanhatPelit/index.js","App.js","serviceWorkerRegistration.js","reducers/tuloksetReducer.js","store.js","index.js"],"names":["LOGIN","gql","END_GAME","GET_ME","CREATE_GAME","GET_GAMES","SET_SCORE","CREATE_USER","GET_ROUND","ANSWER_FRIEND_REQUEST","SEND_FRIEND_REQUEST","setNotification","message","type","data","reducer","state","alive","action","timestamp2String","ts","console","log","aika","Date","setUTCMilliseconds","getDate","getMonth","getFullYear","getHours","getTimezoneOffset","getMinutes","RadioButtons","i","loading","palautus","Number","push","CircularProgress","FormControlLabel","labelPlacement","value","label","control","Radio","color","size","style","padding","Player","player","round","roundData","useSelector","tulokset","dispatch","useDispatch","useState","setLoading","useMutation","refetchQueries","query","variables","roundId","setScore","distance","pisteet","dist","length","laskePisteet","putteja","isNaN","user","name","className","RadioGroup","row","whiteSpace","onChange","e","target","score","catch","finally","Kaverivalinta","kaverit","handleClick","map","k","ListItem","Checkbox","id","NewGameModal","open","setModal","handleNewGame","mina","useQuery","pelaajat","setPelaajat","Modal","onClose","onSubmit","preventDefault","InputLabel","htmlFor","Select","native","Divider","List","checked","getMe","friends","pelaaja","includes","filter","p","Button","fullWidth","variant","onClick","marginTop","PlayerStats","statsit","puttejaSisaan","puttejaTotal","puttejaTotalSisaan","etaisyys","statistiikat","TabPanel","props","children","index","other","hidden","Peli","modalOpen","tabValue","setTabValue","useLazyQuery","haeRundi","kierrosData","uusiPeli","paataPeli","a","res","createGame","handleEndGame","to","called","kierros","margin","AppBar","Tabs","event","uusi","Tab","Grid","container","item","IconButton","ChevronLeft","component","ChevronRight","getRound","players","Notification","notification","Snackbar","autoHideDuration","Alert","severity","Vetomenu","menuOpen","setMenuOpen","notLogged","Drawer","anchor","button","Link","disabled","setUser","LoginForm","loginProcess","setLoginProcess","login","client","useApolloClient","handleLogout","clearStore","window","localStorage","clear","handleLogin","password","then","result","setItem","sailo","Backdrop","TextField","FriendRequestForm","handleSendFriendRequest","KaveriKortti","kaveri","handleFriendRequest","Paper","elevation","paddingLeft","display","width","float","paddingTop","fontWeight","Check","Cancel","FriendRequests","pyynnot","KaveriLista","Kaverit","answerFriendRequest","sendFriendRequest","friendRequests","friendId","answer","Asetukset","xs","email","CreateUserForm","createUser","cuData","tunnus","errors","setErrors","handleSubmit","vars","password2","error","Container","Pelikortti","peli","aktivoi","marginBottom","timestamp","VanhatPelit","getGames","g","App","gotme","useEffect","token","getItem","otaToken","position","Toolbar","edge","Typography","flexGrow","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reducers","combineReducers","tuloksetReducer","userReducer","notificationReducer","store","createStore","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","concat","ReactDOM","render","ApolloProvider","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b8d6cda9.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\r\nexport const LOGIN = gql`\r\n    mutation login($user: String!, $password: String!) {\r\n        login(\r\n            user: $user\r\n            password: $password\r\n        ) {\r\n            value\r\n            user { user name }\r\n        }\r\n    }\r\n\r\n\r\n`\r\nexport const END_GAME = gql`\r\n    mutation endGame ($id: String!) {\r\n        finishGame(\r\n            roundId: $id\r\n        )\r\n    }\r\n`\r\nexport const GET_ME = gql`\r\n    query getMe {\r\n        getMe{\r\n           name\r\n           user\r\n           friends { user name id }\r\n           friendRequests { user name id }\r\n        }\r\n    }\r\n`\r\nexport const CREATE_GAME = gql`\r\n    mutation createGame ($pelaajat: [String]) {\r\n        createGame(\r\n            pelaajat: $pelaajat\r\n        )\r\n    }\r\n`\r\nexport const GET_GAMES = gql`\r\n    query getGames {\r\n        getGames {\r\n            finished\r\n            timestamp\r\n            id\r\n        }\r\n    }\r\n`\r\nexport const SET_SCORE = gql`\r\n    mutation setScore($roundId: String!, $round: ID!, $player: String!, $score: Int!) {\r\n        setScore(\r\n            roundId: $roundId\r\n            round: $round\r\n            player: $player\r\n            score: $score\r\n        ) {\r\n            finished\r\n            timestamp\r\n            players {\r\n                user { user }\r\n                tulokset\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const CREATE_USER = gql`\r\n    mutation createUser($user: String!, $password: String!, $name: String, $email: String) {\r\n        createUser(\r\n            user: $user\r\n            password: $password\r\n            name: $name\r\n            email: $email\r\n        ) {\r\n            user\r\n        }\r\n    }\r\n`\r\nexport const GET_ROUND = gql`\r\n    query getRound($roundId: String!) {\r\n        getRound(\r\n            roundId: $roundId\r\n        ) {\r\n            finished\r\n            timestamp\r\n            players {\r\n                user { user name }\r\n                tulokset\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const ANSWER_FRIEND_REQUEST = gql`\r\n    mutation handleFriendRequest($friendId: String!, $answer: Boolean!) {\r\n        handleFriendRequest(\r\n            friendId: $friendId\r\n            action: $answer\r\n        )\r\n    }\r\n`\r\nexport const SEND_FRIEND_REQUEST = gql`\r\n    mutation sendFriendRequest($name: String!) {\r\n        sendFriendRequest(\r\n            fName: $name\r\n        )\r\n    }\r\n`","const reducer = (state = { alive: false}, action) => {\r\n    switch(action.type) {\r\n        case 'SET_NOTIFICATION':\r\n            return {\r\n                message: action.data.message,\r\n                type: action.data.type,\r\n                alive: true\r\n            }\r\n        case 'KILL_NOTIFICATION':\r\n           return { ...state, alive:false }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setNotification = (message, type) => {\r\n    return {\r\n        type: 'SET_NOTIFICATION',\r\n        data: {\r\n            type,\r\n            message,\r\n        }\r\n    }\r\n}\r\nexport const killNotification = () => {\r\n    return {\r\n        type: 'KILL_NOTIFICATION',\r\n        data: {}\r\n    }\r\n}\r\nexport default reducer;","export const laskePisteet = (tulokset) => {\r\n\r\n    let pisteet = 0\r\n    let dist = 10\r\n    for (var i = 0; i < tulokset.length; i++ ) {\r\n        if (tulokset[i] === null) return pisteet\r\n        pisteet += tulokset[i]*dist\r\n        dist = 5+tulokset[i]\r\n    }\r\n    return pisteet\r\n}\r\nexport const statistiikat = (tulokset) => {\r\n    let statsit = {\r\n        putteja: [0,0,0,0,0,0],\r\n        puttejaSisaan: [0,0,0,0,0,0],\r\n        puttejaTotal: 0,\r\n        puttejaTotalSisaan: 0\r\n    }\r\n    let etaisyys = 5\r\n    for (var i=0; i< tulokset.length; i++) {\r\n        statsit.putteja[etaisyys] += 5\r\n        statsit.puttejaTotal += 5\r\n\r\n        statsit.puttejaSisaan[etaisyys] += tulokset[i]\r\n        statsit.puttejaTotalSisaan += tulokset[i]\r\n        etaisyys = tulokset[i]\r\n    }\r\n    console.log(statsit)\r\n    return statsit\r\n}\r\n\r\nexport const timestamp2String = (ts) => {\r\n    console.log('Aika: ', ts)\r\n    let aika = new Date(0)\r\n    aika.setUTCMilliseconds(ts)\r\n    console.log(aika)\r\n    return aika.getDate() + \".\" + (aika.getMonth()+1) + \".\" + aika.getFullYear() + \" \" + (aika.getHours()+aika.getTimezoneOffset()/60) + \":\" + aika.getMinutes()\r\n}","import { useMutation } from \"@apollo/client\"\r\nimport { CircularProgress, FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { SET_SCORE, GET_ROUND } from \"../queries\"\r\nimport { setNotification } from \"../reducers/notificationReducer\"\r\n\r\nimport { laskePisteet } from '../utils/stuff'\r\n\r\nconst Player = ({ player, round }) => {\r\n\r\n    const roundData = useSelector(state => state.tulokset)\r\n    const dispatch = useDispatch()\r\n\r\n    const [loading, setLoading] = useState(null)\r\n\r\n    const [setScore] = useMutation(SET_SCORE, {\r\n        refetchQueries: [{ query: GET_ROUND, variables: { roundId: roundData.roundId } }]\r\n    })\r\n\r\n\r\n    const handleChange = (e) => {\r\n        console.log('Clickkiä arvoon ', e.target.value)\r\n        setLoading(e.target.value)\r\n        setScore({\r\n            variables: {\r\n                roundId: roundData.roundId,\r\n                round: roundData.round,\r\n                player: player.user.user,\r\n                score: Number(e.target.value)\r\n            }\r\n        }).catch(e => {\r\n            dispatch(setNotification(e.message, 'error'))\r\n        }).finally(() => {\r\n            setLoading(null)\r\n            if (round > 0 && !player.tulokset[round-1] )\r\n                dispatch( setNotification('Kierroksen ' + round + ' tulos puuttuu', 'warning'))\r\n        })\r\n    }\r\n    const distance = (round > 0) ? 5 + player.tulokset[round - 1] : 10\r\n    const pisteet = laskePisteet(player.tulokset)\r\n    let putteja = player.tulokset[round]\r\n    if (isNaN(putteja)) putteja = null\r\n    return (\r\n        <div>\r\n            <h2>{player.user.name} {(distance) ? distance : ' xx '}m - {pisteet}</h2>\r\n            <div className=\"tulosValitsin\">\r\n                <RadioGroup row style={{ whiteSpace: 'nowrap' }} value={putteja} onChange={handleChange}>\r\n                    <RadioButtons loading={loading} />\r\n                </RadioGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst RadioButtons = ({ loading }) => {\r\n    const palautus = []\r\n    var i\r\n    for (i = 0; i < 6; i++) {\r\n        if (loading && i === Number(loading)) {\r\n            palautus.push(<CircularProgress />)\r\n        }\r\n        else {\r\n            palautus.push(\r\n                <FormControlLabel\r\n                    labelPlacement=\"top\"\r\n                    key={i}\r\n                    value={i}\r\n                    label={i}\r\n                    control={\r\n                        <Radio color=\"primary\" size=\"small\"\r\n                            style={{ padding: '0px' }}\r\n                        />}\r\n                />)\r\n        }\r\n    }\r\n    return palautus;\r\n}\r\n\r\nexport default Player","import { useQuery } from \"@apollo/client\"\r\nimport { Button, Checkbox, Divider, FormControlLabel, InputLabel, List, ListItem, Modal, Select } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { GET_ME } from \"../queries\"\r\n\r\nconst NewGameModal = ({ open, setModal, handleNewGame }) => {\r\n\r\n    const mina = useQuery( GET_ME )\r\n    const [ pelaajat, setPelaajat ] = useState([])\r\n\r\n    if (mina.loading) {\r\n        return (\r\n            <h2>Loading stuff...</h2>\r\n        )\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        handleNewGame( pelaajat )\r\n    }\r\n    const handleClick = (pelaaja) => {\r\n        if (pelaajat.includes(pelaaja.id)) {\r\n            setPelaajat( pelaajat.filter( p => p !== pelaaja.id ))\r\n        } else {\r\n            setPelaajat( [...pelaajat, pelaaja.id] )\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal\r\n                open={open}\r\n                onClose={() => setModal(false)}\r\n            >\r\n                <div className=\"newGameModal\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <h2>Uusi peli</h2>\r\n                        <div>\r\n                            <InputLabel htmlFor=\"age-native-simple\">Pelimoodi</InputLabel>\r\n                            <Select native>\r\n                                <option value={0}>Normaali</option>\r\n                            </Select>\r\n                        </div>\r\n                        <Divider />\r\n                        <div>\r\n                            <h3>Pelaajat</h3>\r\n                            <List>\r\n                            <ListItem>\r\n                                <FormControlLabel control={<Checkbox checked />} label=\"Minä\" />\r\n                            </ListItem>\r\n                            <Kaverivalinta kaverit={mina.data.getMe.friends} handleClick={handleClick} />\r\n                            </List>\r\n                            <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Aloita</Button>\r\n                            <Button fullWidth onClick={() => setModal(false)} variant=\"contained\" color=\"secondary\" style={{ marginTop: '5px' }}>Kansel</Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Kaverivalinta = ({ kaverit, handleClick }) => {\r\n    return (\r\n        kaverit.map(k => <ListItem key={k.id}><FormControlLabel control={<Checkbox onChange={() => handleClick(k)} />} label={k.user} /></ListItem>)\r\n    )\r\n}\r\n\r\nexport default NewGameModal","import { statistiikat } from \"../utils/stuff\"\r\n\r\nconst PlayerStats = ({ player }) => {\r\n\r\n    const statsit = statistiikat(player.tulokset)\r\n    return (\r\n        <div>\r\n            Puttiprossa: { statsit.puttejaTotalSisaan / statsit.puttejaTotal * 100} %<br/><br/>\r\n            5m: {statsit.puttejaSisaan[0]} / {statsit.putteja[0]} <br/>\r\n            6m: {statsit.puttejaSisaan[1]} / {statsit.putteja[1]}<br/>\r\n            7m: {statsit.puttejaSisaan[2]} / {statsit.putteja[2]}<br/>\r\n            8m: {statsit.puttejaSisaan[3]} / {statsit.putteja[3]}<br/>\r\n            9m: {statsit.puttejaSisaan[4]} / {statsit.putteja[4]}<br/>\r\n            10m: {statsit.puttejaSisaan[5]} / {statsit.putteja[5]}\r\n        </div>\r\n    )\r\n}\r\nexport default PlayerStats","\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        hidden={value !== index}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n            children\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  export default TabPanel\r\n  ","import { useMutation, useLazyQuery } from '@apollo/client'\r\nimport { Button, AppBar, Divider } from '@material-ui/core'\r\nimport { Grid, IconButton, Tabs, Tab } from '@material-ui/core'\r\nimport { ChevronLeft, ChevronRight } from '@material-ui/icons'\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CREATE_GAME, GET_ROUND, END_GAME} from '../queries'\r\nimport Player from './Player'\r\nimport NewGameModal from './NewGameModal'\r\nimport PlayerStats from './PlayerStats'\r\nimport { Redirect } from 'react-router'\r\nimport TabPanel from './TabPanel'\r\n\r\nconst Peli = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [modalOpen, setModal] = useState(false)\r\n    const [tabValue, setTabValue] = useState(0)\r\n\r\n    const tulokset = useSelector(state => state.tulokset)\r\n    const user = useSelector(state => state.user)\r\n\r\n    const [haeRundi, kierrosData] = useLazyQuery(GET_ROUND)\r\n\r\n    const [uusiPeli] = useMutation(CREATE_GAME)\r\n    const [paataPeli] = useMutation(END_GAME)\r\n\r\n    const handleNewGame = async (pelaajat) => {\r\n\r\n        const res = await uusiPeli({ variables: { pelaajat: pelaajat } })\r\n\r\n        dispatch({ type: 'SET_ID', data: { roundId: res.data.createGame } })\r\n        setModal(false);\r\n    }\r\n    const handleEndGame = async () => {\r\n\r\n        try {\r\n            await paataPeli( { variables: { id: tulokset.roundId }})\r\n        } catch (e) {\r\n            console.log('Virhe pelin päättämisessä. ' + e.message)\r\n        }\r\n        return (\r\n            <Redirect to=\"/pelit\" />\r\n        )\r\n\r\n    }\r\n    if (!user.user) {\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n    }\r\n    if (kierrosData.loading) {\r\n        return (\r\n            <div>\r\n                <h2>Loading stuff...</h2>\r\n            </div>\r\n        )\r\n    }\r\n    if (!kierrosData.called && tulokset.roundId)\r\n        haeRundi({ variables: { roundId: tulokset.roundId } });\r\n    if (tulokset.roundId === null || !kierrosData.data) {\r\n        return (\r\n            <div>\r\n                <h2>Pakko päästä puttaa</h2>\r\n                <p>\r\n                    Ei aktiivista peliä käynnissä. Aloita joko uusi peli tai jatkaa vanhaa peliä.\r\n                </p>\r\n                <p>\r\n                    Vanhan pelin jatkaminen onnistuu aktivoimalla se 'Vanhat peli' -osiosta.\r\n                </p>\r\n                <Button onClick={() => setModal(true)} color=\"primary\" variant=\"contained\" size=\"large\" fullWidth>Aloita uusi peli</Button>\r\n\r\n                <NewGameModal open={modalOpen} setModal={setModal} handleNewGame={handleNewGame} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n    const kierros = tulokset.round\r\n\r\n    return (\r\n        <div style={{ margin: '0' }}>\r\n            <AppBar>\r\n                <Tabs\r\n                    value={tabValue}\r\n                    onChange={(event, uusi) => setTabValue(uusi)}\r\n                    variant=\"fullWidth\"\r\n                >\r\n                    <Tab label=\"Peli\" />\r\n                    <Tab label=\"Asetukset\" />\r\n                    <Tab label=\"Statsit\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            <TabPanel value={tabValue} index={0}>\r\n                <Grid container className=\"rundiValitsin\">\r\n                    <Grid item ><IconButton onClick={() => dispatch({ type: 'DEC_ROUND' })}><ChevronLeft /></IconButton></Grid>\r\n                    <Grid item component={'h2'}>Round {kierros + 1}</Grid>\r\n                    <Grid item><IconButton onClick={() => dispatch({ type: 'INC_ROUND' })}><ChevronRight /></IconButton></Grid>\r\n                </Grid>\r\n                {kierrosData.data.getRound.players.map(p => <Player key={p.user.name} player={p} round={kierros} />)}\r\n            </TabPanel>\r\n            <TabPanel value={tabValue} index={1}>\r\n                <h2>Mitä tehdään?</h2>\r\n                <h3>Poistu pelistä</h3>\r\n                <p>\r\n                    Poistu päävalikkoon. Peli on tallennettu ja tulosten merkkaamista voi jatkaa.\r\n                </p>\r\n                <Button size=\"large\" onClick={() => dispatch({ type: 'RESET_ROUND' })} variant=\"contained\" color=\"primary\" fullWidth>Poistu pelistä</Button>\r\n                <Divider  style={{ marginTop: '15px'}}/>\r\n                <h3>Päätä peli</h3>\r\n                <p>\r\n                    Peli päätetään. Tulosten kirjaaminen suljetaan.\r\n                </p>\r\n                <Button onClick={handleEndGame} size=\"large\" variant=\"contained\" color=\"primary\" fullWidth>Päätä peli</Button>\r\n                <Divider  style={{ marginTop: '15px'}}/>\r\n                <h3>Hylkää peli</h3>\r\n                <p>\r\n                    Kaikki tuhotaan.\r\n                </p>\r\n                <Button size=\"large\" variant=\"contained\" color=\"primary\" fullWidth>Tuhoa maailma</Button>\r\n            </TabPanel>\r\n            <TabPanel value={tabValue} index={2}>\r\n                {kierrosData.data.getRound.players.map(p => <PlayerStats player={p} key={p.user.id} />)}\r\n            </TabPanel>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Peli;","import { killNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport Alert from '@material-ui/lab/Alert'\r\n\r\nconst Notification = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const notification = useSelector(state => state.notification)\r\n\r\n    const handleClose = () => {\r\n        dispatch(killNotification())\r\n    }\r\n    return (\r\n        <div>\r\n            <Snackbar open={notification.alive} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert severity={notification.type} variant=\"filled\">\r\n                    {notification.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nexport default Notification","import { ChevronLeft } from '@material-ui/icons';\r\nimport { Drawer, Divider, List, ListItem, IconButton } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Vetomenu = ({ menuOpen, setMenuOpen }) =>  {\r\n    \r\n    const user = useSelector(state => state.user)\r\n    const notLogged = (!user.user)\r\n    return (\r\n    <Drawer\r\n        open={menuOpen}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n    >\r\n        <IconButton onClick={() => setMenuOpen(false)}>\r\n            <ChevronLeft />\r\n        </IconButton>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button component={Link} to=\"/\" onClick={() => setMenuOpen(false)}>\r\n                Etusivu\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/peli\" onClick={() => setMenuOpen(false)}>\r\n                Uusi peli\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/vanhat\" onClick={() => setMenuOpen(false)}>\r\n                Vanhat pelit\r\n            </ListItem>\r\n            <ListItem disabled={notLogged} button onClick={() => setMenuOpen(false)}>\r\n                Statistiikka\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/kaverit\" onClick={() => setMenuOpen(false)}>\r\n                Kaverit\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem component={Link} to=\"/asetukset\" disabled={notLogged} button onClick={() => setMenuOpen(false)}>\r\n                Asetukset\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/createUser\" onClick={() => setMenuOpen(false)}>\r\n                Luo tunnus\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/login\" onClick={() => setMenuOpen(false)}>\r\n                Kirjaudu sisään\r\n            </ListItem>\r\n\r\n        </List>\r\n    </Drawer>\r\n)}\r\nexport default Vetomenu;","\r\nconst reducer = (state = {}, action ) => {\r\n    switch(action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                user: action.data.user,\r\n                name: action.data.name\r\n            }\r\n        case 'CLEAR_USER':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setUser = (name, user) => {\r\n    return {\r\n        type: 'SET_USER',\r\n        data: {\r\n            user,\r\n            name\r\n            \r\n        }\r\n    }\r\n}\r\nexport const clearUser = () => {\r\n    return {\r\n        type: 'CLEAR_USER',\r\n        data: {}\r\n    }\r\n}\r\nexport default reducer","import { useState } from 'react'\r\nimport { Button, TextField, List, ListItem, Backdrop, CircularProgress } from '@material-ui/core'\r\nimport { useApolloClient, useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries'\r\nimport { setUser, clearUser } from '../reducers/userReducer'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst LoginForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(state => state.user);\r\n\r\n    const [loginProcess, setLoginProcess] = useState(false)\r\n    const [ login ] = useMutation( LOGIN );\r\n    const client = useApolloClient()\r\n\r\n    const handleLogout = async (e) => {\r\n        await client.clearStore()\r\n        window.localStorage.clear()\r\n        dispatch( clearUser() );\r\n        dispatch( { type: 'RESET_ROUND' })\r\n    }\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault()\r\n        setLoginProcess(true);\r\n        login({ variables: { user: e.target.user.value, password: e.target.password.value }}).then(result => {\r\n            window.localStorage.setItem('rageToken', result.data.login.value)\r\n            console.log('Login data: ', result.data.login)\r\n            const sailo = setUser(result.data.login.user.name, result.data.login.user.user);\r\n            dispatch(sailo);\r\n            setLoginProcess(false);\r\n        }).catch(e => {\r\n            dispatch( setNotification('Väärä tunnus tai salasana', 'error'))\r\n            setLoginProcess(false);\r\n        })\r\n    }\r\n    console.log(user)\r\n    if (user.user) {\r\n        return (\r\n            <div>\r\n                <h1>Kirjautunut</h1>\r\n                <p>Olet kirjautunut {user.user}:na</p>\r\n                <Button onClick={handleLogout} variant=\"contained\" color=\"primary\">Kirjaudu ulos</Button>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Backdrop open={loginProcess}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n\r\n            <h1>Kirjaudu sisään</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <List>\r\n                    <ListItem><TextField name=\"user\" label=\"Tunnus\" variant=\"outlined\" fullWidth /></ListItem>\r\n                    <ListItem><TextField name=\"password\" label=\"Salasana\" variant=\"outlined\" type=\"password\" fullWidth /></ListItem>\r\n                    <ListItem><Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">Kirjaudu</Button></ListItem>\r\n                </List>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import { Button, TextField } from '@material-ui/core'\r\n\r\nconst FriendRequestForm = ({ handleSendFriendRequest }) => {\r\n    return (\r\n        <>\r\n        <h2>Lähetä kaveripyyntö</h2>\r\n        <form onSubmit={handleSendFriendRequest}>\r\n        <TextField label=\"Nimi\" variant=\"outlined\" fullWidth name=\"kaveri\" />\r\n        <Button type=\"submit\" variant=\"contained\" fullWidth size=\"large\" color=\"primary\" style={{marginTop: '5px'}}>Lähetä</Button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\nexport default FriendRequestForm","import { IconButton, Paper } from '@material-ui/core'\r\nimport { Cancel, Check } from '@material-ui/icons/'\r\n\r\nconst FriendRequests = ({ pyynnot, handleFriendRequest }) => {\r\n    if (pyynnot.length < 1) {\r\n        return (\r\n            <h3>Ei kaveripyyntöjä</h3>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <h2>Kaveripyynnöt</h2>\r\n            {pyynnot.map(k => <KaveriKortti handleFriendRequest={handleFriendRequest} kaveri={k} key={k.id} />)}\r\n        </>\r\n    )\r\n}\r\nconst KaveriKortti = ({ kaveri, handleFriendRequest }) => {\r\n    return (\r\n        <Paper elevation={2} style={{ paddingLeft: '5px', display: 'inline-block', width: '100%'}}>\r\n            <div style={{float: 'left', paddingTop: '10px', fontWeight: 'bold' }}>\r\n               {kaveri.user} ({kaveri.name})\r\n            </div>\r\n            <div style={{float: 'right' }}>\r\n                <IconButton onClick={() => handleFriendRequest(kaveri.id, true )}>\r\n                    <Check style={{ color: 'green' }} />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleFriendRequest(kaveri.id, false )}>\r\n                    <Cancel style={{ color: 'red' }} />\r\n                </IconButton>\r\n            </div>\r\n\r\n        </Paper>\r\n    )\r\n}\r\nexport default FriendRequests","import { useMutation, useQuery } from \"@apollo/client\"\r\nimport { ANSWER_FRIEND_REQUEST, GET_ME, SEND_FRIEND_REQUEST } from \"../queries\"\r\nimport FriendRequestForm from \"./FriendRequestForm\"\r\nimport FriendRequests from \"./FriendRequests\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst Kaverit = () => {\r\n\r\n    const mina = useQuery(GET_ME)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [ answerFriendRequest ] = useMutation( ANSWER_FRIEND_REQUEST, { refetchQueries: [{ query: GET_ME }] } )\r\n    const [ sendFriendRequest ] = useMutation( SEND_FRIEND_REQUEST)\r\n\r\n    const handleSendFriendRequest = (e) => {\r\n        e.preventDefault()\r\n        sendFriendRequest( { variables: { name: e.target.kaveri.value }} ).then(res => {\r\n            dispatch( setNotification('Kaveripyyntö lähetetty!', 'success'))\r\n        }).catch(e => {\r\n            dispatch( setNotification('Pyyntö epäonnistui: ' + e.message, 'error'))\r\n        })\r\n        e.target.kaveri.value = ''\r\n    }\r\n    const handleFriendRequest = (friendId, answer) => {\r\n        answerFriendRequest( { variables: { friendId, answer }}).then(res => {\r\n            dispatch( setNotification('Kaveripyyntö hyväksytty', 'success'))\r\n        }).catch(e => {\r\n            dispatch( setNotification('Tapahtui virhe: ' + e.message, 'error' ))\r\n        })\r\n    }\r\n    if (mina.loading) {\r\n        return ( <h2>Loading friends...</h2>)\r\n    }\r\n    console.log(mina)\r\n    return (\r\n        <div>\r\n        <h2>Kaverisi</h2>\r\n        <KaveriLista kaverit={mina.data.getMe.friends} />\r\n        <FriendRequests pyynnot={mina.data.getMe.friendRequests} handleFriendRequest={handleFriendRequest} />\r\n        <FriendRequestForm handleSendFriendRequest={handleSendFriendRequest} />\r\n        </div>\r\n    )\r\n\r\n}\r\nconst KaveriLista = ({ kaverit }) => {\r\n    if (kaverit.length < 1) {\r\n        return (<div>Ei kavereita :(</div>)\r\n    }\r\n    return (\r\n        <div> {kaverit.map(k => <li key={k.id}>{k.user} ({k.name})</li>)}</div>\r\n    )\r\n}\r\nexport default Kaverit","import { useQuery } from \"@apollo/client\"\r\nimport { Backdrop, CircularProgress, Grid, TextField, } from \"@material-ui/core\"\r\nimport { GET_ME } from \"../queries\"\r\n\r\nconst Asetukset = () => {\r\n\r\n    const user = useQuery(GET_ME)\r\n    if (user.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Tiedot</h1>\r\n            <Grid container>\r\n                <Grid item xs={6}>Tunnus</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.user}</Grid>\r\n                <Grid item xs={6}>Nimi</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.name}</Grid>\r\n                <Grid item xs={6}>Sähköposti</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.email}</Grid>\r\n            </Grid>\r\n            <h2>Vaihda salasana</h2>\r\n            <TextField type=\"password\" variant=\"outlined\" label=\"Uusi salasana\" fullWidth size=\"small\"/>\r\n            <TextField type=\"password\" variant=\"outlined\" label=\"Salasana uudestaan\" fullWidth size=\"small\"/>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Asetukset","import { useMutation } from \"@apollo/client\"\r\nimport { ListItem, List, Button, TextField, Divider, Container } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { CREATE_USER } from '../queries'\r\nimport { setNotification } from \"../reducers/notificationReducer\"\r\n\r\nconst CreateUserForm = () => {\r\n\r\n    const [createUser, cuData ] = useMutation(CREATE_USER)\r\n    const dispatch = useDispatch()\r\n\r\n    const [ errors, setErrors] = useState({ tunnus: false, password: false })\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const vars = {\r\n            user: e.target.user.value,\r\n            password: e.target.password.value,\r\n            name: e.target.name.value,\r\n            email: e.target.email.value\r\n        }\r\n        if (vars.user === '') {\r\n            setErrors( { ...errors, tunnus: true })\r\n        } else if (vars.password === '' || vars.password !== e.target.password2.value) {\r\n            setErrors( { ...errors, password: true })\r\n        }\r\n        else {\r\n            try {\r\n                await createUser({ variables: vars })\r\n                dispatch(setNotification('Tunnukset luotiin onnistuneesti', 'success'))\r\n            } catch (e) {\r\n                dispatch(setNotification('Virhe tunnusten luonnissa: ' + e.message, 'error'))\r\n            }\r\n        }\r\n    }\r\n    if (cuData.loading) {\r\n        return (<h2>Creating user...</h2>)\r\n    }\r\n    if (cuData.called && !cuData.error) {\r\n        return (<Redirect to=\"/login\" /> )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Luo tunnus</h1>\r\n            <h2>Perustiedot</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <List>\r\n                    <ListItem><TextField error={errors.tunnus} name=\"user\" label=\"Tunnus\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField error={errors.password} name=\"password\" type=\"password\" label=\"Salasana\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField error={errors.password} name=\"password2\" label=\"Salasana uudestaan\" type=\"password\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <Divider style={{ marginTop: '15px' }} />\r\n                    <h2>Lisätiedot</h2>\r\n                    <Container>\r\n                        Ei pakollisia. Sähköpostiosoitteen antaminen mahdollistaa tunnusten palauttamisen.\r\n                    </Container>\r\n                    <ListItem><TextField name=\"name\" label=\"Nimi\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField name=\"email\" label=\"Sähköposti\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><Button type=\"submit\" size=\"large\" variant=\"contained\" fullWidth color=\"primary\">Luo tunnus</Button></ListItem>\r\n                </List>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUserForm","import { Button, Paper } from '@material-ui/core'\r\nimport { statistiikat, timestamp2String } from '../utils/stuff'\r\n\r\nconst Pelikortti = ({ peli, aktivoi }) => {\r\n    console.log(peli)\r\n    return (\r\n        <Paper style={{padding: '5px', marginBottom:'3px'}} elevation={3}>\r\n            { timestamp2String(peli.timestamp) } {  }\r\n            <Button size=\"small\" onClick={() => aktivoi(peli.id)}>Aktivoi</Button>\r\n        </Paper>\r\n    )\r\n\r\n}\r\nexport default Pelikortti","import { useQuery } from \"@apollo/client\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { GET_GAMES } from \"../queries\"\r\nimport { Button } from '@material-ui/core'\r\nimport Pelikortti from \"./Pelikortti\"\r\n\r\nconst VanhatPelit = () => {\r\n\r\n    const getGames = useQuery(GET_GAMES)\r\n    const user = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const aktivoi = (g) => {\r\n        dispatch({ type: 'SET_ID', data: { roundId: g }})\r\n    }\r\n\r\n    if (!user.user) {\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n    }\r\n\r\n    if (getGames.loading) {\r\n        return (\r\n            <h2>Loading rounds...</h2>\r\n        )\r\n    }\r\n    console.log(getGames)\r\n    return (\r\n        <div>\r\n            <h2>Vanhat pelit</h2>\r\n            {getGames.data.getGames.map(g => <Pelikortti aktivoi={aktivoi} peli={g} key={g.id} />)}\r\n        </div>\r\n    )\r\n}\r\nexport default VanhatPelit","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom'\n\nimport Peli from './Peli';\nimport Notification from './components/Notification'\n\nimport Vetomenu from './components/Vetomenu'\nimport LoginForm from './components/LoginForm'\nimport Kaverit from './Kaverit'\nimport Asetukset from './components/Asetukset'\n\nimport { AppBar, Toolbar, IconButton, Typography, Container } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport CreateUserForm from './components/CreateUserForm';\nimport VanhatPelit from './VanhatPelit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GET_ME } from './queries';\nimport { useLazyQuery } from '@apollo/client';\nimport { setUser } from './reducers/userReducer';\n\n\nfunction App() {\n\n  const [menuOpen, setMenuOpen] = useState(false)\n  const dispatch = useDispatch()\n  const user = useSelector(state => state.user)\n\n  const [getMe, gotme] = useLazyQuery(GET_ME)\n\n  const openMenu = () => {\n    setMenuOpen(true)\n  }\n  useEffect(() => {\n    const otaToken = () => {\n      const token = localStorage.getItem('rageToken')\n      console.log(token)\n      console.log(user)\n      if (token && !user.user) {\n        if (!gotme.loading && gotme.data) {\n          console.log(gotme)\n          dispatch( setUser(gotme.data.getMe.name, gotme.data.getMe.user))\n        }\n        else if (gotme.called === false) {\n          getMe()\n        }\n      }\n    }\n    otaToken()\n  }, [gotme])\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" onClick={openMenu}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n            RagePutt\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Vetomenu menuOpen={menuOpen} setMenuOpen={setMenuOpen} />\n      <Notification />\n      <Container>\n        <Switch>\n          <Route path=\"/kaverit\">\n            <Kaverit />\n          </Route>\n          <Route path=\"/login\" >\n            <LoginForm />\n          </Route>\n          <Route path=\"/vanhat\" >\n            <VanhatPelit />\n          </Route>\n          <Route path=\"/peli\">\n            <Peli />\n          </Route>\n          <Route path=\"/createUser\">\n            <CreateUserForm />\n          </Route>\n          <Route path=\"/asetukset\">\n            <Asetukset />\n          </Route>\n          <Route path=\"/\">\n            <h1>Etusivu</h1>\n            <p>\n              Rageputt is bäk\n            </p>\n          </Route>\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst reducer = (state = {round: 0, roundId: null}, action) => {\r\n    switch(action.type) {\r\n        case 'INC_ROUND':\r\n            if (state.round < 19)\r\n                return {...state, round: state.round + 1 }\r\n            else return state;\r\n        case 'DEC_ROUND':\r\n            if (state.round >= 1)\r\n                return {...state, round: state.round - 1 } \r\n            else return state;\r\n        case 'SET_ID':\r\n            return { ...state, roundId: action.data.roundId }\r\n        case 'INIT_ROUND':\r\n            return action.data;\r\n        case 'RESET_ROUND':\r\n            return { round: 0, roundId: null }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers, createStore } from 'redux';\r\nimport tuloksetReducer from './reducers/tuloksetReducer'\r\nimport userReducer from './reducers/userReducer'\r\nimport notificationReducer from './reducers/notificationReducer'\r\n\r\nconst reducers = combineReducers({\r\n    tulokset: tuloksetReducer,\r\n    user: userReducer,\r\n    notification: notificationReducer\r\n})\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { setContext } from 'apollo-link-context'\n\nimport { Provider } from 'react-redux'\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client'\n\nimport store from './store'\n\nconst authLink = setContext(( _, { headers }) => {\n  const token = localStorage.getItem('rageToken')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  }\n})\nlet ApolloUri = 'https://rageputt.herokuapp.com/graphql'\nif (process.env.NODE_ENV !== 'production') {\n  console.log('Development mode selected!')\n  ApolloUri = 'http://localhost:4000/graphql'\n}\nconst httpLink = new HttpLink( { uri: ApolloUri })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}