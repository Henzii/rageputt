{"version":3,"sources":["queries.js","reducers/notificationReducer.js","utils/stuff.js","Peli/Player.js","Peli/Tulosruutu.js","Peli/NewGameModal.js","Peli/PlayerStats.js","Peli/TabPanel.js","Peli/index.js","components/Notification.js","components/Vetomenu.js","components/Statsit.js","reducers/userReducer.js","components/LoginForm.js","Kaverit/FriendRequestForm.js","Kaverit/FriendRequests.js","Kaverit/index.js","components/Asetukset.js","components/CreateUserForm.js","VanhatPelit/Pelikortti.js","VanhatPelit/index.js","App.js","serviceWorkerRegistration.js","reducers/tuloksetReducer.js","store.js","index.js"],"names":["CARD_CHANGED","gql","LOGIN","END_GAME","GET_ME","CREATE_GAME","GET_GAMES","SET_SCORE","CREATE_USER","GET_ROUND","ANSWER_FRIEND_REQUEST","SEND_FRIEND_REQUEST","setNotification","message","type","data","reducer","state","alive","action","statistiikat","tulokset","statsit","putteja","puttejaSisaan","puttejaTotal","puttejaTotalSisaan","etaisyys","i","length","mergeStatsit","eka","toka","palautus","timestamp2String","ts","console","log","aika","Date","setUTCMilliseconds","getDate","getMonth","getFullYear","getHours","getTimezoneOffset","getMinutes","RadioButtons","loading","Number","push","CircularProgress","FormControlLabel","labelPlacement","value","label","control","Radio","color","size","style","padding","Player","player","round","roundData","useSelector","dispatch","useDispatch","useState","setLoading","useMutation","variables","roundId","setScore","distance","pisteet","dist","laskePisteet","isNaN","user","name","className","RadioGroup","row","whiteSpace","onChange","e","target","score","catch","finally","Tulosruutu","kierrosData","kierros","client","useApolloClient","pushed","useSubscription","getRound","id","useEffect","dataMuistissa","readQuery","query","updatedGetRound","players","map","p","changedCard","writeQuery","Grid","container","item","IconButton","onClick","ChevronLeft","component","ChevronRight","Kaverivalinta","kaverit","handleClick","k","ListItem","Checkbox","NewGameModal","open","setModal","handleNewGame","mina","useQuery","pelaajat","setPelaajat","Modal","onClose","onSubmit","preventDefault","InputLabel","htmlFor","Select","native","Divider","List","checked","getMe","friends","pelaaja","includes","filter","Button","fullWidth","variant","marginTop","PlayerStats","TabPanel","props","children","index","other","hidden","Peli","modalOpen","tabValue","setTabValue","useLazyQuery","haeRundi","uusiPeli","paataPeli","a","res","createGame","handleEndGame","to","Backdrop","called","margin","AppBar","Tabs","event","uusi","Tab","Notification","notification","Snackbar","autoHideDuration","Alert","severity","Vetomenu","menuOpen","setMenuOpen","notLogged","Drawer","anchor","button","Link","disabled","Statsit","statsRawData","statsData","getGames","allStats","find","setUser","LoginForm","loginProcess","setLoginProcess","login","handleLogout","clearStore","window","localStorage","clear","handleLogin","password","then","result","setItem","sailo","TextField","FriendRequestForm","handleSendFriendRequest","KaveriKortti","kaveri","handleFriendRequest","Paper","elevation","paddingLeft","display","width","float","paddingTop","fontWeight","Check","Cancel","FriendRequests","pyynnot","KaveriLista","Kaverit","refetchQueries","answerFriendRequest","sendFriendRequest","friendRequests","friendId","answer","Asetukset","xs","email","CreateUserForm","createUser","cuData","tunnus","errors","setErrors","handleSubmit","vars","password2","error","Container","Pelikortti","peli","aktivoi","marginBottom","timestamp","VanhatPelit","g","App","gotme","token","getItem","otaToken","position","Toolbar","edge","Typography","flexGrow","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reducers","combineReducers","tuloksetReducer","userReducer","notificationReducer","store","createStore","httpLink","HttpLink","uri","authLink","setContext","_","headers","authorization","socketLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","link","connectToDevTools","ReactDOM","render","ApolloProvider","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3779cda1.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\nexport const CARD_CHANGED = gql`\r\n    subscription changedCard( $roundId: String!) {\r\n        changedCard( roundId: $roundId) {\r\n            data {\r\n                tulokset\r\n                user { user name }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const LOGIN = gql`\r\n    mutation login($user: String!, $password: String!) {\r\n        login(\r\n            user: $user\r\n            password: $password\r\n        ) {\r\n            value\r\n            user { user name }\r\n        }\r\n    }\r\n\r\n\r\n`\r\nexport const END_GAME = gql`\r\n    mutation endGame ($id: String!) {\r\n        finishGame(\r\n            roundId: $id\r\n        )\r\n    }\r\n`\r\nexport const GET_ME = gql`\r\n    query getMe {\r\n        getMe{\r\n           name\r\n           user\r\n           friends { user name id }\r\n           friendRequests { user name id }\r\n        }\r\n    }\r\n`\r\nexport const CREATE_GAME = gql`\r\n    mutation createGame ($pelaajat: [String]) {\r\n        createGame(\r\n            pelaajat: $pelaajat\r\n        )\r\n    }\r\n`\r\nexport const GET_GAMES = gql`\r\n    query getGames {\r\n        getGames {\r\n            finished\r\n            timestamp\r\n            id\r\n            players{ tulokset user{user name}}\r\n        }\r\n    }\r\n`\r\nexport const SET_SCORE = gql`\r\n    mutation setScore($roundId: String!, $round: ID!, $player: String!, $score: Int!) {\r\n        setScore(\r\n            roundId: $roundId\r\n            round: $round\r\n            player: $player\r\n            score: $score\r\n        ) {\r\n            finished\r\n            timestamp\r\n            players {\r\n                user { user }\r\n                tulokset\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const CREATE_USER = gql`\r\n    mutation createUser($user: String!, $password: String!, $name: String, $email: String) {\r\n        createUser(\r\n            user: $user\r\n            password: $password\r\n            name: $name\r\n            email: $email\r\n        ) {\r\n            user\r\n        }\r\n    }\r\n`\r\nexport const GET_ROUND = gql`\r\n    query getRound($roundId: String!) {\r\n        getRound(\r\n            roundId: $roundId\r\n        ) {\r\n            finished\r\n            timestamp\r\n            id\r\n            players {\r\n                user { user name }\r\n                tulokset\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const ANSWER_FRIEND_REQUEST = gql`\r\n    mutation handleFriendRequest($friendId: String!, $answer: Boolean!) {\r\n        handleFriendRequest(\r\n            friendId: $friendId\r\n            action: $answer\r\n        )\r\n    }\r\n`\r\nexport const SEND_FRIEND_REQUEST = gql`\r\n    mutation sendFriendRequest($name: String!) {\r\n        sendFriendRequest(\r\n            fName: $name\r\n        )\r\n    }\r\n`","const reducer = (state = { alive: false}, action) => {\r\n    switch(action.type) {\r\n        case 'SET_NOTIFICATION':\r\n            return {\r\n                message: action.data.message,\r\n                type: action.data.type,\r\n                alive: true\r\n            }\r\n        case 'KILL_NOTIFICATION':\r\n           return { ...state, alive:false }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setNotification = (message, type) => {\r\n    return {\r\n        type: 'SET_NOTIFICATION',\r\n        data: {\r\n            type,\r\n            message,\r\n        }\r\n    }\r\n}\r\nexport const killNotification = () => {\r\n    return {\r\n        type: 'KILL_NOTIFICATION',\r\n        data: {}\r\n    }\r\n}\r\nexport default reducer;","export const laskePisteet = (tulokset) => {\r\n\r\n    let pisteet = 0\r\n    let dist = 10\r\n    for (var i = 0; i < tulokset.length; i++ ) {\r\n        if (tulokset[i] === null) return pisteet\r\n        pisteet += tulokset[i]*dist\r\n        dist = 5+tulokset[i]\r\n    }\r\n    return pisteet\r\n}\r\nexport const statistiikat = (tulokset) => {\r\n    let statsit = {\r\n        putteja: [0,0,0,0,0,0],\r\n        puttejaSisaan: [0,0,0,0,0,0],\r\n        puttejaTotal: 0,\r\n        puttejaTotalSisaan: 0\r\n    }\r\n    let etaisyys = 5\r\n    for (var i=0; i< tulokset.length; i++) {\r\n        if (tulokset[i] === null) continue\r\n        statsit.putteja[etaisyys] += 5\r\n        statsit.puttejaTotal += 5\r\n\r\n        statsit.puttejaSisaan[etaisyys] += tulokset[i]\r\n        statsit.puttejaTotalSisaan += tulokset[i]\r\n        etaisyys = tulokset[i]\r\n    }\r\n    return statsit\r\n}\r\nexport const mergeStatsit = (eka, toka) => {\r\n    let palautus = {\r\n        putteja: [0,0,0,0,0,0],\r\n        puttejaSisaan: [0,0,0,0,0,0],\r\n        puttejaTotal: 0,\r\n        puttejaTotalSisaan: 0\r\n    }\r\n    if (toka === null) toka = palautus\r\n    for( var i=0;i<6; i++) {\r\n        palautus.putteja[i] = eka.putteja[i] + toka.putteja[i]\r\n        palautus.puttejaSisaan[i] = eka.puttejaSisaan[i] + toka.puttejaSisaan[i]\r\n    }\r\n    palautus.puttejaTotal = eka.puttejaTotal + toka.puttejaTotal\r\n    palautus.puttejaTotalSisaan = eka.puttejaTotalSisaan + toka.puttejaTotalSisaan\r\n\r\n    return palautus\r\n}\r\nexport const timestamp2String = (ts) => {\r\n    console.log('Aika: ', ts)\r\n    let aika = new Date(0)\r\n    aika.setUTCMilliseconds(ts)\r\n    console.log(aika)\r\n    return aika.getDate() + \".\" + (aika.getMonth()+1) + \".\" + aika.getFullYear() + \" \" + (aika.getHours()+aika.getTimezoneOffset()/60) + \":\" + aika.getMinutes()\r\n}","import { useMutation } from \"@apollo/client\"\r\nimport { CircularProgress, FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { SET_SCORE, GET_ROUND } from \"../queries\"\r\nimport { setNotification } from \"../reducers/notificationReducer\"\r\n\r\nimport { laskePisteet } from '../utils/stuff'\r\n\r\nconst Player = ({ player, round }) => {\r\n\r\n    const roundData = useSelector(state => state.tulokset)\r\n    const dispatch = useDispatch()\r\n\r\n    const [loading, setLoading] = useState(null)\r\n\r\n    const [setScore] = useMutation(SET_SCORE, { variables: { roundId: roundData.roundId } })\r\n\r\n    const handleChange = (e) => {\r\n        console.log('Clickkiä arvoon ', e.target.value)\r\n        setLoading(e.target.value)\r\n        setScore({\r\n            variables: {\r\n                roundId: roundData.roundId,\r\n                round: roundData.round,\r\n                player: player.user.user,\r\n                score: Number(e.target.value)\r\n            }\r\n        }).catch(e => {\r\n            dispatch(setNotification(e.message, 'error'))\r\n        }).finally(() => {\r\n            setLoading(null)\r\n            if (round > 0 && !player.tulokset[round-1] )\r\n                dispatch( setNotification('Kierroksen ' + round + ' tulos puuttuu', 'warning'))\r\n        })\r\n    }\r\n    const distance = (round > 0) ? 5 + player.tulokset[round - 1] : 10\r\n    const pisteet = laskePisteet(player.tulokset)\r\n    let putteja = player.tulokset[round]\r\n    if (isNaN(putteja)) putteja = null\r\n    return (\r\n        <div>\r\n            <h2>{player.user.name} {(distance) ? distance : ' xx '}m - {pisteet}</h2>\r\n            <div className=\"tulosValitsin\">\r\n                <RadioGroup row style={{ whiteSpace: 'nowrap' }} value={putteja} onChange={handleChange}>\r\n                    <RadioButtons loading={loading} />\r\n                </RadioGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst RadioButtons = ({ loading }) => {\r\n    const palautus = []\r\n    var i\r\n    for (i = 0; i < 6; i++) {\r\n        if (loading && i === Number(loading)) {\r\n            palautus.push(<CircularProgress />)\r\n        }\r\n        else {\r\n            palautus.push(\r\n                <FormControlLabel\r\n                    labelPlacement=\"top\"\r\n                    key={i}\r\n                    value={i}\r\n                    label={i}\r\n                    control={\r\n                        <Radio color=\"primary\" size=\"small\"\r\n                            style={{ padding: '0px' }}\r\n                        />}\r\n                />)\r\n        }\r\n    }\r\n    return palautus;\r\n}\r\n\r\nexport default Player","import { Grid, IconButton } from '@material-ui/core'\r\nimport { ChevronLeft, ChevronRight } from '@material-ui/icons'\r\nimport { useDispatch } from 'react-redux'\r\nimport Player from './Player'\r\n\r\nimport { useSubscription, useApolloClient } from '@apollo/client'\r\nimport { CARD_CHANGED, GET_ROUND } from '../queries'\r\n\r\nimport { useEffect } from 'react'\r\n\r\nconst Tulosruutu = ({ kierrosData, tulokset }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const kierros = tulokset.round\r\n\r\n    const client = useApolloClient()\r\n    const pushed = useSubscription(CARD_CHANGED, { variables: { roundId: kierrosData.data.getRound.id } })\r\n\r\n    useEffect(() => {\r\n        if (!pushed.loading) {\r\n            console.log(pushed)\r\n            const dataMuistissa = client.readQuery({ query: GET_ROUND, variables: { roundId: kierrosData.data.getRound.id } })\r\n            console.log('MUISTI: ', dataMuistissa)\r\n\r\n            if (dataMuistissa !== null) {\r\n\r\n                const updatedGetRound = {\r\n                    ...dataMuistissa.getRound,\r\n                    players: dataMuistissa.getRound.players.map(p =>\r\n                        (p.user.user === pushed.data.changedCard.data.user.user)\r\n                            ? pushed.data.changedCard.data\r\n                            : p\r\n                    )\r\n                }\r\n                console.log('PÄIVITETTY: ', updatedGetRound)\r\n                client.writeQuery({\r\n                    query: GET_ROUND,\r\n                    variables: { roundId: kierrosData.data.getRound.id },\r\n                    data: {\r\n                        getRound: {\r\n                            ...dataMuistissa.getRound,\r\n                            players: dataMuistissa.getRound.players.map(p =>\r\n                                (p.user.user === pushed.data.changedCard.data.user.user)\r\n                                    ? pushed.data.changedCard.data\r\n                                    : p\r\n                            )\r\n                        }\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n        }\r\n    }, [pushed])\r\n\r\n    return (\r\n        <div>\r\n            <Grid container className=\"rundiValitsin\">\r\n                <Grid item ><IconButton onClick={() => dispatch({ type: 'DEC_ROUND' })}><ChevronLeft /></IconButton></Grid>\r\n                <Grid item component={'h2'}>Round {kierros + 1}</Grid>\r\n                <Grid item><IconButton onClick={() => dispatch({ type: 'INC_ROUND' })}><ChevronRight /></IconButton></Grid>\r\n            </Grid>\r\n            {kierrosData.data.getRound.players.map(p => <Player key={p.user.id + 'ppp'} player={p} round={kierros} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tulosruutu","import { useQuery } from \"@apollo/client\"\r\nimport { Button, Checkbox, Divider, FormControlLabel, InputLabel, List, ListItem, Modal, Select } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { GET_ME } from \"../queries\"\r\n\r\nconst NewGameModal = ({ open, setModal, handleNewGame }) => {\r\n\r\n    const mina = useQuery( GET_ME )\r\n    const [ pelaajat, setPelaajat ] = useState([])\r\n\r\n    if (mina.loading) {\r\n        return (\r\n            <h2>Loading stuff...</h2>\r\n        )\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        handleNewGame( pelaajat )\r\n    }\r\n    const handleClick = (pelaaja) => {\r\n        if (pelaajat.includes(pelaaja.id)) {\r\n            setPelaajat( pelaajat.filter( p => p !== pelaaja.id ))\r\n        } else {\r\n            setPelaajat( [...pelaajat, pelaaja.id] )\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal\r\n                open={open}\r\n                onClose={() => setModal(false)}\r\n            >\r\n                <div className=\"newGameModal\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <h2>Uusi peli</h2>\r\n                        <div>\r\n                            <InputLabel htmlFor=\"age-native-simple\">Pelimoodi</InputLabel>\r\n                            <Select native>\r\n                                <option value={0}>Normaali</option>\r\n                            </Select>\r\n                        </div>\r\n                        <Divider />\r\n                        <div>\r\n                            <h3>Pelaajat</h3>\r\n                            <List>\r\n                            <ListItem>\r\n                                <FormControlLabel control={<Checkbox checked />} label=\"Minä\" />\r\n                            </ListItem>\r\n                            <Kaverivalinta kaverit={mina.data.getMe.friends} handleClick={handleClick} />\r\n                            </List>\r\n                            <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Aloita</Button>\r\n                            <Button fullWidth onClick={() => setModal(false)} variant=\"contained\" color=\"secondary\" style={{ marginTop: '5px' }}>Kansel</Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Kaverivalinta = ({ kaverit, handleClick }) => {\r\n    return (\r\n        kaverit.map(k => <ListItem key={k.id}><FormControlLabel control={<Checkbox onChange={() => handleClick(k)} />} label={k.user} /></ListItem>)\r\n    )\r\n}\r\n\r\nexport default NewGameModal","import { statistiikat } from \"../utils/stuff\"\r\n\r\nconst PlayerStats = ({ player }) => {\r\n\r\n    const statsit = statistiikat(player.tulokset)\r\n    return (\r\n        <div>\r\n            Puttiprossa: { statsit.puttejaTotalSisaan / statsit.puttejaTotal * 100} %<br/><br/>\r\n            5m: {statsit.puttejaSisaan[0]} / {statsit.putteja[0]} <br/>\r\n            6m: {statsit.puttejaSisaan[1]} / {statsit.putteja[1]}<br/>\r\n            7m: {statsit.puttejaSisaan[2]} / {statsit.putteja[2]}<br/>\r\n            8m: {statsit.puttejaSisaan[3]} / {statsit.putteja[3]}<br/>\r\n            9m: {statsit.puttejaSisaan[4]} / {statsit.putteja[4]}<br/>\r\n            10m: {statsit.puttejaSisaan[5]} / {statsit.putteja[5]}\r\n        </div>\r\n    )\r\n}\r\nexport default PlayerStats","\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        hidden={value !== index}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n            children\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  export default TabPanel\r\n  ","import { useMutation, useLazyQuery } from '@apollo/client'\r\nimport { Button, AppBar, Divider, CircularProgress } from '@material-ui/core'\r\nimport { Tabs, Tab, Backdrop } from '@material-ui/core'\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CREATE_GAME, GET_ROUND, END_GAME } from '../queries'\r\nimport Tulosruutu from './Tulosruutu'\r\nimport NewGameModal from './NewGameModal'\r\nimport PlayerStats from './PlayerStats'\r\nimport { Redirect } from 'react-router'\r\nimport TabPanel from './TabPanel'\r\n\r\nconst Peli = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [modalOpen, setModal] = useState(false)\r\n    const [tabValue, setTabValue] = useState(0)\r\n\r\n    const tulokset = useSelector(state => state.tulokset)\r\n    const user = useSelector(state => state.user)\r\n\r\n    const [haeRundi, kierrosData] = useLazyQuery(GET_ROUND)\r\n\r\n    const [uusiPeli] = useMutation(CREATE_GAME)\r\n    const [paataPeli] = useMutation(END_GAME)\r\n\r\n    const handleNewGame = async (pelaajat) => {\r\n\r\n        const res = await uusiPeli({ variables: { pelaajat: pelaajat } })\r\n\r\n        dispatch({ type: 'SET_ID', data: { roundId: res.data.createGame } })\r\n        setModal(false);\r\n    }\r\n    const handleEndGame = async () => {\r\n\r\n        try {\r\n            await paataPeli( { variables: { id: tulokset.roundId }})\r\n        } catch (e) {\r\n            console.log('Virhe pelin päättämisessä. ' + e.message)\r\n        }\r\n        return (\r\n            <Redirect to=\"/pelit\" />\r\n        )\r\n\r\n    }\r\n    if (!user.user) {\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n    }\r\n    if (kierrosData.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n            \r\n        )\r\n    }\r\n    if (!kierrosData.called && tulokset.roundId)\r\n        haeRundi({ variables: { roundId: tulokset.roundId } });\r\n    if (tulokset.roundId === null || !kierrosData.data) {\r\n        return (\r\n            <div>\r\n                <h2>Pakko päästä puttaa</h2>\r\n                <p>\r\n                    Ei aktiivista peliä käynnissä. Aloita joko uusi peli tai jatkaa vanhaa peliä.\r\n                </p>\r\n                <p>\r\n                    Vanhan pelin jatkaminen onnistuu aktivoimalla se 'Vanhat peli' -osiosta.\r\n                </p>\r\n                <Button onClick={() => setModal(true)} color=\"primary\" variant=\"contained\" size=\"large\" fullWidth>Aloita uusi peli</Button>\r\n\r\n                <NewGameModal open={modalOpen} setModal={setModal} handleNewGame={handleNewGame} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div style={{ margin: '0' }}>\r\n            <AppBar>\r\n                <Tabs\r\n                    value={tabValue}\r\n                    onChange={(event, uusi) => setTabValue(uusi)}\r\n                    variant=\"fullWidth\"\r\n                >\r\n                    <Tab label=\"Peli\" />\r\n                    <Tab label=\"Asetukset\" />\r\n                    <Tab label=\"Statsit\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            <TabPanel value={tabValue} index={0}>\r\n                <Tulosruutu kierrosData={kierrosData} tulokset={tulokset}/>\r\n            </TabPanel>\r\n            <TabPanel value={tabValue} index={1}>\r\n                <h2>Mitä tehdään?</h2>\r\n                <h3>Poistu pelistä</h3>\r\n                <p>\r\n                    Poistu päävalikkoon. Peli on tallennettu ja tulosten merkkaamista voi jatkaa.\r\n                </p>\r\n                <Button size=\"large\" onClick={() => dispatch({ type: 'RESET_ROUND' })} variant=\"contained\" color=\"primary\" fullWidth>Poistu pelistä</Button>\r\n                <Divider  style={{ marginTop: '15px'}}/>\r\n                <h3>Päätä peli</h3>\r\n                <p>\r\n                    Peli päätetään. Tulosten kirjaaminen suljetaan.\r\n                </p>\r\n                <Button onClick={handleEndGame} size=\"large\" variant=\"contained\" color=\"primary\" fullWidth>Päätä peli</Button>\r\n                <Divider  style={{ marginTop: '15px'}}/>\r\n                <h3>Hylkää peli</h3>\r\n                <p>\r\n                    Kaikki tuhotaan.\r\n                </p>\r\n                <Button size=\"large\" variant=\"contained\" color=\"primary\" fullWidth>Tuhoa maailma</Button>\r\n            </TabPanel>\r\n            <TabPanel value={tabValue} index={2}>\r\n                {kierrosData.data.getRound.players.map(p => <PlayerStats player={p} key={'ps'+p.user.id} />)}\r\n            </TabPanel>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Peli;","import { killNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport Alert from '@material-ui/lab/Alert'\r\n\r\nconst Notification = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const notification = useSelector(state => state.notification)\r\n\r\n    const handleClose = () => {\r\n        dispatch(killNotification())\r\n    }\r\n    return (\r\n        <div>\r\n            <Snackbar open={notification.alive} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert severity={notification.type} variant=\"filled\">\r\n                    {notification.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nexport default Notification","import { ChevronLeft } from '@material-ui/icons';\r\nimport { Drawer, Divider, List, ListItem, IconButton } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Vetomenu = ({ menuOpen, setMenuOpen }) =>  {\r\n    \r\n    const user = useSelector(state => state.user)\r\n    const notLogged = (!user.user)\r\n    return (\r\n    <Drawer\r\n        open={menuOpen}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n    >\r\n        <IconButton onClick={() => setMenuOpen(false)}>\r\n            <ChevronLeft />\r\n        </IconButton>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button component={Link} to=\"/\" onClick={() => setMenuOpen(false)}>\r\n                Etusivu\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/peli\" onClick={() => setMenuOpen(false)}>\r\n                Uusi peli\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/vanhat\" onClick={() => setMenuOpen(false)}>\r\n                Vanhat pelit\r\n            </ListItem>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/stats\" onClick={() => setMenuOpen(false)}>\r\n                Statistiikka\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/kaverit\" onClick={() => setMenuOpen(false)}>\r\n                Kaverit\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem component={Link} to=\"/asetukset\" disabled={notLogged} button onClick={() => setMenuOpen(false)}>\r\n                Asetukset\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/createUser\" onClick={() => setMenuOpen(false)}>\r\n                Luo tunnus\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/login\" onClick={() => setMenuOpen(false)}>\r\n                Kirjaudu sisään\r\n            </ListItem>\r\n\r\n        </List>\r\n    </Drawer>\r\n)}\r\nexport default Vetomenu;","import { useQuery } from '@apollo/client'\r\nimport { Backdrop, CircularProgress } from '@material-ui/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { GET_GAMES } from '../queries'\r\nimport { mergeStatsit, statistiikat } from '../utils/stuff'\r\n\r\nconst Statsit = () => {\r\n\r\n    const statsRawData = useQuery(GET_GAMES)\r\n    const user = useSelector(state => state.user)\r\n\r\n    if (statsRawData.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    const statsData = statsRawData.data.getGames\r\n    let allStats = null\r\n    for(let i = 0; i < statsData.length; i++ ) {\r\n        const player = statsData[i].players.find(p => p.user.user === user.user)\r\n        allStats = mergeStatsit( statistiikat(player.tulokset), allStats )\r\n    }\r\n    console.log(allStats)\r\n    return (\r\n        <div>\r\n            Puttiprossa: {allStats.puttejaTotalSisaan/allStats.puttejaTotal*100}<br/><br/>\r\n            5m: {allStats.puttejaSisaan[0]/allStats.putteja[0]*100}<br/>\r\n            6m: {allStats.puttejaSisaan[1]/allStats.putteja[1]*100}<br/>\r\n            7m: {allStats.puttejaSisaan[2]/allStats.putteja[2]*100}<br/>\r\n            8m: {allStats.puttejaSisaan[3]/allStats.putteja[3]*100}<br/>\r\n            9m: {allStats.puttejaSisaan[4]/allStats.putteja[4]*100}<br/>\r\n            10m: {allStats.puttejaSisaan[5]/allStats.putteja[5]*100}<br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statsit","\r\nconst reducer = (state = {}, action ) => {\r\n    switch(action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                user: action.data.user,\r\n                name: action.data.name\r\n            }\r\n        case 'CLEAR_USER':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setUser = (name, user) => {\r\n    return {\r\n        type: 'SET_USER',\r\n        data: {\r\n            user,\r\n            name\r\n            \r\n        }\r\n    }\r\n}\r\nexport const clearUser = () => {\r\n    return {\r\n        type: 'CLEAR_USER',\r\n        data: {}\r\n    }\r\n}\r\nexport default reducer","import { useState } from 'react'\r\nimport { Button, TextField, List, ListItem, Backdrop, CircularProgress } from '@material-ui/core'\r\nimport { useApolloClient, useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries'\r\nimport { setUser, clearUser } from '../reducers/userReducer'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst LoginForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(state => state.user);\r\n\r\n    const [loginProcess, setLoginProcess] = useState(false)\r\n    const [ login ] = useMutation( LOGIN );\r\n    const client = useApolloClient()\r\n\r\n    const handleLogout = async (e) => {\r\n        await client.clearStore()\r\n        window.localStorage.clear()\r\n        dispatch( clearUser() );\r\n        dispatch( { type: 'RESET_ROUND' })\r\n    }\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault()\r\n        setLoginProcess(true);\r\n        login({ variables: { user: e.target.user.value, password: e.target.password.value }}).then(result => {\r\n            window.localStorage.setItem('rageToken', result.data.login.value)\r\n            console.log('Login data: ', result.data.login)\r\n            const sailo = setUser(result.data.login.user.name, result.data.login.user.user);\r\n            dispatch(sailo);\r\n            setLoginProcess(false);\r\n        }).catch(e => {\r\n            dispatch( setNotification('Väärä tunnus tai salasana', 'error'))\r\n            setLoginProcess(false);\r\n        })\r\n    }\r\n    console.log(user)\r\n    if (user.user) {\r\n        return (\r\n            <div>\r\n                <h1>Kirjautunut</h1>\r\n                <p>Olet kirjautunut {user.user}:na</p>\r\n                <Button onClick={handleLogout} variant=\"contained\" color=\"primary\">Kirjaudu ulos</Button>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Backdrop open={loginProcess}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n\r\n            <h1>Kirjaudu sisään</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <List>\r\n                    <ListItem><TextField name=\"user\" label=\"Tunnus\" variant=\"outlined\" fullWidth /></ListItem>\r\n                    <ListItem><TextField name=\"password\" label=\"Salasana\" variant=\"outlined\" type=\"password\" fullWidth /></ListItem>\r\n                    <ListItem><Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">Kirjaudu</Button></ListItem>\r\n                </List>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import { Button, TextField } from '@material-ui/core'\r\n\r\nconst FriendRequestForm = ({ handleSendFriendRequest }) => {\r\n    return (\r\n        <>\r\n        <h2>Lähetä kaveripyyntö</h2>\r\n        <form onSubmit={handleSendFriendRequest}>\r\n        <TextField label=\"Nimi\" variant=\"outlined\" fullWidth name=\"kaveri\" />\r\n        <Button type=\"submit\" variant=\"contained\" fullWidth size=\"large\" color=\"primary\" style={{marginTop: '5px'}}>Lähetä</Button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\nexport default FriendRequestForm","import { IconButton, Paper } from '@material-ui/core'\r\nimport { Cancel, Check } from '@material-ui/icons/'\r\n\r\nconst FriendRequests = ({ pyynnot, handleFriendRequest }) => {\r\n    if (pyynnot.length < 1) {\r\n        return (\r\n            <h3>Ei kaveripyyntöjä</h3>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <h2>Kaveripyynnöt</h2>\r\n            {pyynnot.map(k => <KaveriKortti handleFriendRequest={handleFriendRequest} kaveri={k} key={k.id} />)}\r\n        </>\r\n    )\r\n}\r\nconst KaveriKortti = ({ kaveri, handleFriendRequest }) => {\r\n    return (\r\n        <Paper elevation={2} style={{ paddingLeft: '5px', display: 'inline-block', width: '100%'}}>\r\n            <div style={{float: 'left', paddingTop: '10px', fontWeight: 'bold' }}>\r\n               {kaveri.user} ({kaveri.name})\r\n            </div>\r\n            <div style={{float: 'right' }}>\r\n                <IconButton onClick={() => handleFriendRequest(kaveri.id, true )}>\r\n                    <Check style={{ color: 'green' }} />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleFriendRequest(kaveri.id, false )}>\r\n                    <Cancel style={{ color: 'red' }} />\r\n                </IconButton>\r\n            </div>\r\n\r\n        </Paper>\r\n    )\r\n}\r\nexport default FriendRequests","import { useMutation, useQuery } from \"@apollo/client\"\r\nimport { ANSWER_FRIEND_REQUEST, GET_ME, SEND_FRIEND_REQUEST } from \"../queries\"\r\nimport FriendRequestForm from \"./FriendRequestForm\"\r\nimport FriendRequests from \"./FriendRequests\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\n\r\nconst Kaverit = () => {\r\n\r\n    const mina = useQuery(GET_ME)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [ answerFriendRequest ] = useMutation( ANSWER_FRIEND_REQUEST, { refetchQueries: [{ query: GET_ME }] } )\r\n    const [ sendFriendRequest ] = useMutation( SEND_FRIEND_REQUEST)\r\n\r\n    const handleSendFriendRequest = (e) => {\r\n        e.preventDefault()\r\n        sendFriendRequest( { variables: { name: e.target.kaveri.value }} ).then(res => {\r\n            dispatch( setNotification('Kaveripyyntö lähetetty!', 'success'))\r\n        }).catch(e => {\r\n            dispatch( setNotification('Pyyntö epäonnistui: ' + e.message, 'error'))\r\n        })\r\n        e.target.kaveri.value = ''\r\n    }\r\n    const handleFriendRequest = (friendId, answer) => {\r\n        answerFriendRequest( { variables: { friendId, answer }}).then(res => {\r\n            dispatch( setNotification('Kaveripyyntö hyväksytty', 'success'))\r\n        }).catch(e => {\r\n            dispatch( setNotification('Tapahtui virhe: ' + e.message, 'error' ))\r\n        })\r\n    }\r\n    if (mina.loading) {\r\n        return ( <h2>Loading friends...</h2>)\r\n    }\r\n    console.log(mina)\r\n    return (\r\n        <div>\r\n        <h2>Kaverisi</h2>\r\n        <KaveriLista kaverit={mina.data.getMe.friends} />\r\n        <FriendRequests pyynnot={mina.data.getMe.friendRequests} handleFriendRequest={handleFriendRequest} />\r\n        <FriendRequestForm handleSendFriendRequest={handleSendFriendRequest} />\r\n        </div>\r\n    )\r\n\r\n}\r\nconst KaveriLista = ({ kaverit }) => {\r\n    if (kaverit.length < 1) {\r\n        return (<div>Ei kavereita :(</div>)\r\n    }\r\n    return (\r\n        <div> {kaverit.map(k => <li key={k.id}>{k.user} ({k.name})</li>)}</div>\r\n    )\r\n}\r\nexport default Kaverit","import { useQuery } from \"@apollo/client\"\r\nimport { Backdrop, CircularProgress, Grid, TextField, } from \"@material-ui/core\"\r\nimport { GET_ME } from \"../queries\"\r\n\r\nconst Asetukset = () => {\r\n\r\n    const user = useQuery(GET_ME)\r\n    if (user.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Tiedot</h1>\r\n            <Grid container>\r\n                <Grid item xs={6}>Tunnus</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.user}</Grid>\r\n                <Grid item xs={6}>Nimi</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.name}</Grid>\r\n                <Grid item xs={6}>Sähköposti</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.email}</Grid>\r\n            </Grid>\r\n            <h2>Vaihda salasana</h2>\r\n            <TextField type=\"password\" variant=\"outlined\" label=\"Uusi salasana\" fullWidth size=\"small\"/>\r\n            <TextField type=\"password\" variant=\"outlined\" label=\"Salasana uudestaan\" fullWidth size=\"small\"/>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Asetukset","import { useMutation } from \"@apollo/client\"\r\nimport { ListItem, List, Button, TextField, Divider, Container } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { CREATE_USER } from '../queries'\r\nimport { setNotification } from \"../reducers/notificationReducer\"\r\n\r\nconst CreateUserForm = () => {\r\n\r\n    const [createUser, cuData ] = useMutation(CREATE_USER)\r\n    const dispatch = useDispatch()\r\n\r\n    const [ errors, setErrors] = useState({ tunnus: false, password: false })\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const vars = {\r\n            user: e.target.user.value,\r\n            password: e.target.password.value,\r\n            name: e.target.name.value,\r\n            email: e.target.email.value\r\n        }\r\n        if (vars.user === '') {\r\n            setErrors( { ...errors, tunnus: true })\r\n        } else if (vars.password === '' || vars.password !== e.target.password2.value) {\r\n            setErrors( { ...errors, password: true })\r\n        }\r\n        else {\r\n            try {\r\n                await createUser({ variables: vars })\r\n                dispatch(setNotification('Tunnukset luotiin onnistuneesti', 'success'))\r\n            } catch (e) {\r\n                dispatch(setNotification('Virhe tunnusten luonnissa: ' + e.message, 'error'))\r\n            }\r\n        }\r\n    }\r\n    if (cuData.loading) {\r\n        return (<h2>Creating user...</h2>)\r\n    }\r\n    if (cuData.called && !cuData.error) {\r\n        return (<Redirect to=\"/login\" /> )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Luo tunnus</h1>\r\n            <h2>Perustiedot</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <List>\r\n                    <ListItem><TextField error={errors.tunnus} name=\"user\" label=\"Tunnus\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField error={errors.password} name=\"password\" type=\"password\" label=\"Salasana\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField error={errors.password} name=\"password2\" label=\"Salasana uudestaan\" type=\"password\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <Divider style={{ marginTop: '15px' }} />\r\n                    <h2>Lisätiedot</h2>\r\n                    <Container>\r\n                        Ei pakollisia. Sähköpostiosoitteen antaminen mahdollistaa tunnusten palauttamisen.\r\n                    </Container>\r\n                    <ListItem><TextField name=\"name\" label=\"Nimi\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField name=\"email\" label=\"Sähköposti\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><Button type=\"submit\" size=\"large\" variant=\"contained\" fullWidth color=\"primary\">Luo tunnus</Button></ListItem>\r\n                </List>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUserForm","import { Button, Paper } from '@material-ui/core'\r\nimport { statistiikat, timestamp2String } from '../utils/stuff'\r\n\r\nconst Pelikortti = ({ peli, aktivoi }) => {\r\n    console.log(peli)\r\n    return (\r\n        <Paper style={{padding: '5px', marginBottom:'3px'}} elevation={3}>\r\n            { timestamp2String(peli.timestamp) } {  }\r\n            <Button size=\"small\" onClick={() => aktivoi(peli.id)}>Aktivoi</Button>\r\n        </Paper>\r\n    )\r\n\r\n}\r\nexport default Pelikortti","import { useQuery } from \"@apollo/client\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { GET_GAMES } from \"../queries\"\r\nimport { Backdrop, CircularProgress } from '@material-ui/core'\r\nimport Pelikortti from \"./Pelikortti\"\r\n\r\nconst VanhatPelit = () => {\r\n\r\n    const getGames = useQuery(GET_GAMES)\r\n    const user = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const aktivoi = (g) => {\r\n        dispatch({ type: 'SET_ID', data: { roundId: g }})\r\n    }\r\n\r\n    if (!user.user) {\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n    }\r\n\r\n    if (getGames.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    console.log(getGames)\r\n    return (\r\n        <div>\r\n            <h2>Vanhat pelit</h2>\r\n            {getGames.data.getGames.map(g => <Pelikortti aktivoi={aktivoi} peli={g} key={g.id} />)}\r\n        </div>\r\n    )\r\n}\r\nexport default VanhatPelit","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom'\n\nimport Peli from './Peli';\nimport Notification from './components/Notification'\n\nimport Vetomenu from './components/Vetomenu'\nimport Statsit from './components/Statsit'\nimport LoginForm from './components/LoginForm'\nimport Kaverit from './Kaverit'\nimport Asetukset from './components/Asetukset'\n\nimport { AppBar, Toolbar, IconButton, Typography, Container } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport CreateUserForm from './components/CreateUserForm';\nimport VanhatPelit from './VanhatPelit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GET_ME } from './queries';\nimport { useLazyQuery } from '@apollo/client';\nimport { setUser } from './reducers/userReducer';\n\n\nfunction App() {\n\n  const [menuOpen, setMenuOpen] = useState(false)\n  const dispatch = useDispatch()\n  const user = useSelector(state => state.user)\n\n  const [getMe, gotme] = useLazyQuery(GET_ME)\n\n  const openMenu = () => {\n    setMenuOpen(true)\n  }\n  useEffect(() => {\n    const otaToken = () => {\n      const token = localStorage.getItem('rageToken')\n      console.log(token)\n      console.log(user)\n      if (token && !user.user) {\n        if (!gotme.loading && gotme.data) {\n          console.log(gotme)\n          dispatch( setUser(gotme.data.getMe.name, gotme.data.getMe.user))\n        }\n        else if (gotme.called === false) {\n          getMe()\n        }\n      }\n    }\n    otaToken()\n  }, [gotme])\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" onClick={openMenu}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n            RagePutt\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Vetomenu menuOpen={menuOpen} setMenuOpen={setMenuOpen} />\n      <Notification />\n      <Container>\n        <Switch>\n          <Route path=\"/kaverit\">\n            <Kaverit />\n          </Route>\n          <Route path=\"/login\" >\n            <LoginForm />\n          </Route>\n          <Route path=\"/vanhat\" >\n            <VanhatPelit />\n          </Route>\n          <Route path=\"/peli\">\n            <Peli />\n          </Route>\n          <Route path=\"/stats\">\n            <Statsit />\n          </Route>\n          <Route path=\"/createUser\">\n            <CreateUserForm />\n          </Route>\n          <Route path=\"/asetukset\">\n            <Asetukset />\n          </Route>\n          <Route path=\"/\">\n            <h1>Etusivu</h1>\n            <p>\n              Rageputt is bäk\n            </p>\n          </Route>\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst reducer = (state = {round: 0, roundId: null}, action) => {\r\n    switch(action.type) {\r\n        case 'INC_ROUND':\r\n            if (state.round < 19)\r\n                return {...state, round: state.round + 1 }\r\n            else return state;\r\n        case 'DEC_ROUND':\r\n            if (state.round >= 1)\r\n                return {...state, round: state.round - 1 } \r\n            else return state;\r\n        case 'SET_ID':\r\n            return { ...state, roundId: action.data.roundId }\r\n        case 'INIT_ROUND':\r\n            return action.data;\r\n        case 'RESET_ROUND':\r\n            return { round: 0, roundId: null }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers, createStore } from 'redux';\r\nimport tuloksetReducer from './reducers/tuloksetReducer'\r\nimport userReducer from './reducers/userReducer'\r\nimport notificationReducer from './reducers/notificationReducer'\r\n\r\nconst reducers = combineReducers({\r\n    tulokset: tuloksetReducer,\r\n    user: userReducer,\r\n    notification: notificationReducer\r\n})\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { setContext } from 'apollo-link-context'\n\nimport { Provider } from 'react-redux'\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\n\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\nimport store from './store'\n\nlet ApolloUri = 'https://rageputt.herokuapp.com/graphql'\nif (process.env.NODE_ENV !== 'production') {\n  console.log('Development mode selected!')\n  ApolloUri = 'http://localhost:4000/graphql'\n}\n\nconst httpLink = new HttpLink({ uri: ApolloUri })\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('rageToken')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  }\n})\n\nconst socketLink = new WebSocketLink({\n  uri: (process.env.NODE_ENV !== 'production') ? 'ws://localhost:4000/graphql' : 'ws://rageputt.herokuapp.com/graphql',\n  options: {\n    reconnect: true\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  socketLink,\n  authLink.concat(httpLink)\n\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink,\n  connectToDevTools: true\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}