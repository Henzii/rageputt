{"version":3,"sources":["reducers/notificationReducer.js","components/Notification.js","components/Vetomenu.js","components/YlaPalkki.js","queries.js","utils/stuff.js","pages/Peli/Player.js","pages/Peli/Tulosruutu.js","pages/Peli/NewGameModal.js","components/BarChart.js","pages/Peli/PlayerStats.js","pages/Peli/TabPanel.js","pages/Peli/index.js","pages/Statsit/index.js","reducers/userReducer.js","components/LoginForm.js","pages/Kaverit/FriendRequestForm.js","pages/Kaverit/FriendRequests.js","pages/Kaverit/index.js","pages/Asetukset/index.js","pages/CreateUser/index.js","pages/VanhatPelit/Pelikortti.js","pages/VanhatPelit/index.js","pages/Etusivu/index.js","App.js","serviceWorkerRegistration.js","reducers/tuloksetReducer.js","store.js","index.js"],"names":["setNotification","message","type","data","reducer","state","alive","action","Notification","dispatch","useDispatch","notification","useSelector","Snackbar","open","autoHideDuration","onClose","Alert","severity","variant","Vetomenu","menuOpen","setMenuOpen","notLogged","user","Drawer","anchor","IconButton","onClick","ChevronLeft","Divider","List","ListItem","button","component","Link","to","disabled","YlaPalkki","openMenu","AppBar","position","Toolbar","edge","Typography","style","flexGrow","CARD_CHANGED","gql","LOGIN","END_GAME","GET_ME","CREATE_GAME","GET_GAMES","SET_SCORE","CREATE_USER","GET_ROUND","ANSWER_FRIEND_REQUEST","SEND_FRIEND_REQUEST","laskePisteet","tulokset","pisteet","dist","i","length","tulokset2ChartData","palautus","putteja","puttejaSisaan","prossa","etaisyys","timestamp2String","ts","aika","Date","setUTCMilliseconds","tunti","getHours","getTimezoneOffset","minsat","getMinutes","getDate","getMonth","getFullYear","RadioButtons","loading","Number","push","CircularProgress","FormControlLabel","labelPlacement","value","label","control","Radio","color","size","padding","Player","player","round","roundData","useState","setLoading","useMutation","variables","roundId","setScore","distance","isNaN","name","className","RadioGroup","row","whiteSpace","onChange","e","console","log","target","score","catch","finally","Tulosruutu","kierrosData","kierros","client","useApolloClient","pushed","useSubscription","getRound","id","useEffect","dataMuistissa","readQuery","query","updatedGetRound","players","map","p","changedCard","writeQuery","Grid","container","item","ChevronRight","Kaverivalinta","kaverit","handleClick","k","Checkbox","NewGameModal","setModal","handleNewGame","mina","useQuery","pelaajat","setPelaajat","Modal","onSubmit","preventDefault","InputLabel","htmlFor","Select","native","checked","getMe","friends","pelaaja","includes","filter","Button","fullWidth","marginTop","BarChart","otsikko","Paper","height","text","min","max","argumentField","valueField","PlayerStats","statsit","TabPanel","props","children","index","other","hidden","Peli","modalOpen","tabValue","setTabValue","useLazyQuery","haeRundi","uusiPeli","paataPeli","a","refetchQueries","res","createGame","handleEndGame","Backdrop","called","Tabs","event","uusi","backgroundColor","Tab","Container","Statsit","statsRawData","statsData","getGames","kaikkiPuttiProssat","kaikkiPisteet","maxPisteet","find","game","setUser","LoginForm","loginProcess","setLoginProcess","login","handleLogout","clearStore","window","localStorage","clear","handleLogin","password","then","result","setItem","sailo","TextField","FriendRequestForm","handleSendFriendRequest","KaveriKortti","kaveri","handleFriendRequest","elevation","paddingLeft","display","width","float","paddingTop","fontWeight","Check","Cancel","FriendRequests","pyynnot","KaveriLista","Kaverit","answerFriendRequest","sendFriendRequest","friendRequests","friendId","answer","Asetukset","xs","email","CreateUserForm","createUser","cuData","tunnus","errors","setErrors","handleSubmit","vars","password2","error","Pelikortti","peli","aktivoi","showStats","setShotStats","Card","marginBottom","CardHeader","avatar","finished","title","subheader","timestamp","Collapse","in","unmountOnExit","timeout","CardContent","reduce","total","cur","toFixed","VanhatPelit","g","Etusivu","paragraph","App","gotme","token","getItem","otaToken","path","CreateUser","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reducers","combineReducers","tuloksetReducer","userReducer","notificationReducer","store","createStore","httpLink","HttpLink","uri","authLink","setContext","_","headers","authorization","socketLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","link","connectToDevTools","ReactDOM","render","ApolloProvider","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9c4b2243.chunk.js","sourcesContent":["const reducer = (state = { alive: false}, action) => {\r\n    switch(action.type) {\r\n        case 'SET_NOTIFICATION':\r\n            return {\r\n                message: action.data.message,\r\n                type: action.data.type,\r\n                alive: true\r\n            }\r\n        case 'KILL_NOTIFICATION':\r\n           return { ...state, alive:false }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setNotification = (message, type) => {\r\n    return {\r\n        type: 'SET_NOTIFICATION',\r\n        data: {\r\n            type,\r\n            message,\r\n        }\r\n    }\r\n}\r\nexport const killNotification = () => {\r\n    return {\r\n        type: 'KILL_NOTIFICATION',\r\n        data: {}\r\n    }\r\n}\r\nexport default reducer;","import { killNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport Alert from '@material-ui/lab/Alert'\r\n\r\nconst Notification = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const notification = useSelector(state => state.notification)\r\n\r\n    const handleClose = () => {\r\n        dispatch(killNotification())\r\n    }\r\n    return (\r\n        <div>\r\n            <Snackbar open={notification.alive} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert severity={notification.type} variant=\"filled\">\r\n                    {notification.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nexport default Notification","import { ChevronLeft } from '@material-ui/icons';\r\nimport { Drawer, Divider, List, ListItem, IconButton } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Vetomenu = ({ menuOpen, setMenuOpen }) =>  {\r\n    \r\n    const user = useSelector(state => state.user)\r\n    const notLogged = (!user.user)\r\n    return (\r\n    <Drawer\r\n        open={menuOpen}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n    >\r\n        <IconButton onClick={() => setMenuOpen(false)}>\r\n            <ChevronLeft />\r\n        </IconButton>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button component={Link} to=\"/\" onClick={() => setMenuOpen(false)}>\r\n                Etusivu\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/peli\" onClick={() => setMenuOpen(false)}>\r\n                Uusi peli\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/vanhat\" onClick={() => setMenuOpen(false)}>\r\n                Vanhat pelit\r\n            </ListItem>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/stats\" onClick={() => setMenuOpen(false)}>\r\n                Statistiikka\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem disabled={notLogged} button component={Link} to=\"/kaverit\" onClick={() => setMenuOpen(false)}>\r\n                Kaverit\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem component={Link} to=\"/asetukset\" disabled={notLogged} button onClick={() => setMenuOpen(false)}>\r\n                Asetukset\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/createUser\" onClick={() => setMenuOpen(false)}>\r\n                Luo tunnus\r\n            </ListItem>\r\n            <ListItem button component={Link} to=\"/login\" onClick={() => setMenuOpen(false)}>\r\n                Kirjaudu sisään\r\n            </ListItem>\r\n\r\n        </List>\r\n    </Drawer>\r\n)}\r\nexport default Vetomenu;","import { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\n\r\nconst YlaPalkki = ({ openMenu }) => {\r\n    return (\r\n        <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" onClick={openMenu}>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\r\n            RagePutt\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      )\r\n}\r\nexport default YlaPalkki","import { gql } from '@apollo/client'\r\n\r\nexport const CARD_CHANGED = gql`\r\n    subscription changedCard( $roundId: String!) {\r\n        changedCard( roundId: $roundId) {\r\n            data {\r\n                tulokset\r\n                user { user name }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const LOGIN = gql`\r\n    mutation login($user: String!, $password: String!) {\r\n        login(\r\n            user: $user\r\n            password: $password\r\n        ) {\r\n            value\r\n            user { user name }\r\n        }\r\n    }\r\n\r\n\r\n`\r\nexport const END_GAME = gql`\r\n    mutation endGame ($id: String!) {\r\n        finishGame(\r\n            roundId: $id\r\n        )\r\n    }\r\n`\r\nexport const GET_ME = gql`\r\n    query getMe {\r\n        getMe{\r\n           name\r\n           user\r\n           friends { user name id }\r\n           friendRequests { user name id }\r\n        }\r\n    }\r\n`\r\nexport const CREATE_GAME = gql`\r\n    mutation createGame ($pelaajat: [String]) {\r\n        createGame(\r\n            pelaajat: $pelaajat\r\n        )\r\n    }\r\n`\r\nexport const GET_GAMES = gql`\r\n    query getGames {\r\n        getGames {\r\n            finished\r\n            timestamp\r\n            id\r\n            players{ tulokset user{user name}}\r\n        }\r\n    }\r\n`\r\nexport const SET_SCORE = gql`\r\n    mutation setScore($roundId: String!, $round: ID!, $player: String!, $score: Int!) {\r\n        setScore(\r\n            roundId: $roundId\r\n            round: $round\r\n            player: $player\r\n            score: $score\r\n        ) {\r\n            finished\r\n            timestamp\r\n            players {\r\n                user { user }\r\n                tulokset\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const CREATE_USER = gql`\r\n    mutation createUser($user: String!, $password: String!, $name: String, $email: String) {\r\n        createUser(\r\n            user: $user\r\n            password: $password\r\n            name: $name\r\n            email: $email\r\n        ) {\r\n            user\r\n        }\r\n    }\r\n`\r\nexport const GET_ROUND = gql`\r\n    query getRound($roundId: String!) {\r\n        getRound(\r\n            roundId: $roundId\r\n        ) {\r\n            finished\r\n            timestamp\r\n            id\r\n            players {\r\n                user { user name }\r\n                tulokset\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const ANSWER_FRIEND_REQUEST = gql`\r\n    mutation handleFriendRequest($friendId: String!, $answer: Boolean!) {\r\n        handleFriendRequest(\r\n            friendId: $friendId\r\n            action: $answer\r\n        )\r\n    }\r\n`\r\nexport const SEND_FRIEND_REQUEST = gql`\r\n    mutation sendFriendRequest($name: String!) {\r\n        sendFriendRequest(\r\n            fName: $name\r\n        )\r\n    }\r\n`","\r\nexport const laskePisteet = (tulokset) => {\r\n\r\n    let pisteet = 0\r\n    let dist = 10\r\n    for (var i = 0; i < tulokset.length; i++ ) {\r\n        if (tulokset[i] === null) return pisteet\r\n        pisteet += tulokset[i]*dist\r\n        dist = 5+tulokset[i]\r\n    }\r\n    return pisteet\r\n}\r\nexport const tulokset2ChartData = (tulokset = [], palautus = [\r\n        { dist: '5m', putteja: 0, puttejaSisaan: 0, prossa: 0 },\r\n        { dist: '6m', putteja: 0, puttejaSisaan: 0, prossa: 0 },\r\n        { dist: '7m', putteja: 0, puttejaSisaan: 0, prossa: 0 },\r\n        { dist: '8m', putteja: 0, puttejaSisaan: 0, prossa: 0},\r\n        { dist: '9m', putteja: 0, puttejaSisaan: 0, prossa: 0},\r\n        { dist: '10m', putteja: 0, puttejaSisaan: 0, prossa: 0 } ]) => {\r\n    \r\n    for (let i=0; i < tulokset.length; i++) {\r\n        if (tulokset[i] === null) return palautus\r\n        const etaisyys = (i !== 0) ? tulokset[i-1] : 5\r\n\r\n        palautus[etaisyys].putteja += 5\r\n        palautus[etaisyys].puttejaSisaan += tulokset[i]\r\n\r\n        palautus[etaisyys].prossa = palautus[etaisyys].puttejaSisaan / palautus[etaisyys].putteja * 100\r\n    }\r\n    return palautus\r\n}\r\nexport const timestamp2String = (ts) => {\r\n    let aika = new Date(0)\r\n    aika.setUTCMilliseconds(ts)\r\n    const tunti = aika.getHours()+aika.getTimezoneOffset()/60\r\n    const minsat = aika.getMinutes()\r\n    return aika.getDate() + \".\" + (aika.getMonth()+1) + \".\" + aika.getFullYear() + \" \" + \r\n        ((tunti < 10) ? '0'+tunti : tunti) + \":\" + \r\n        ( (aika.getMinutes() < 10) ? '0'+minsat : minsat)\r\n}","import { useMutation } from \"@apollo/client\"\r\nimport { CircularProgress, FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { SET_SCORE, GET_ROUND } from \"../../queries\"\r\nimport { setNotification } from \"../../reducers/notificationReducer\"\r\n\r\nimport { laskePisteet } from '../../utils/stuff'\r\n\r\nconst Player = ({ player, round }) => {\r\n\r\n    const roundData = useSelector(state => state.tulokset)\r\n    const dispatch = useDispatch()\r\n\r\n    const [loading, setLoading] = useState(null)\r\n\r\n    const [setScore] = useMutation(SET_SCORE, { variables: { roundId: roundData.roundId } })\r\n\r\n    const handleChange = (e) => {\r\n        console.log('Clickkiä arvoon ', e.target.value)\r\n        setLoading(e.target.value)\r\n        setScore({\r\n            variables: {\r\n                roundId: roundData.roundId,\r\n                round: roundData.round,\r\n                player: player.user.user,\r\n                score: Number(e.target.value)\r\n            }\r\n        }).catch(e => {\r\n            dispatch(setNotification(e.message, 'error'))\r\n        }).finally(() => {\r\n            setLoading(null)\r\n            if (round > 0 && !player.tulokset[round-1] )\r\n                dispatch( setNotification('Kierroksen ' + round + ' tulos puuttuu', 'warning'))\r\n        })\r\n    }\r\n    const distance = (round > 0) ? 5 + player.tulokset[round - 1] : 10\r\n    const pisteet = laskePisteet(player.tulokset)\r\n    let putteja = player.tulokset[round]\r\n    if (isNaN(putteja)) putteja = null\r\n    return (\r\n        <div>\r\n            <h2>{player.user.name} {(distance) ? distance : ' xx '}m - {pisteet}</h2>\r\n            <div className=\"tulosValitsin\">\r\n                <RadioGroup row style={{ whiteSpace: 'nowrap' }} value={putteja} onChange={handleChange}>\r\n                    <RadioButtons loading={loading} />\r\n                </RadioGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst RadioButtons = ({ loading }) => {\r\n    const palautus = []\r\n    var i\r\n    for (i = 0; i < 6; i++) {\r\n        if (loading && i === Number(loading)) {\r\n            palautus.push(<CircularProgress />)\r\n        }\r\n        else {\r\n            palautus.push(\r\n                <FormControlLabel\r\n                    labelPlacement=\"top\"\r\n                    key={i}\r\n                    value={i}\r\n                    label={i}\r\n                    control={\r\n                        <Radio color=\"primary\" size=\"small\"\r\n                            style={{ padding: '0px' }}\r\n                        />}\r\n                />)\r\n        }\r\n    }\r\n    return palautus;\r\n}\r\n\r\nexport default Player","import { Grid, IconButton } from '@material-ui/core'\r\nimport { ChevronLeft, ChevronRight } from '@material-ui/icons'\r\nimport { useDispatch } from 'react-redux'\r\nimport Player from './Player'\r\n\r\nimport { useSubscription, useApolloClient } from '@apollo/client'\r\nimport { CARD_CHANGED, GET_ROUND } from '../../queries'\r\n\r\nimport { useEffect } from 'react'\r\n\r\nconst Tulosruutu = ({ kierrosData, tulokset }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const kierros = tulokset.round\r\n\r\n    const client = useApolloClient()\r\n    const pushed = useSubscription(CARD_CHANGED, { variables: { roundId: kierrosData.data.getRound.id } })\r\n\r\n    useEffect(() => {\r\n        if (!pushed.loading) {\r\n            console.log(pushed)\r\n            const dataMuistissa = client.readQuery({ query: GET_ROUND, variables: { roundId: kierrosData.data.getRound.id } })\r\n            console.log('MUISTI: ', dataMuistissa)\r\n\r\n            if (dataMuistissa !== null) {\r\n\r\n                const updatedGetRound = {\r\n                    ...dataMuistissa.getRound,\r\n                    players: dataMuistissa.getRound.players.map(p =>\r\n                        (p.user.user === pushed.data.changedCard.data.user.user)\r\n                            ? pushed.data.changedCard.data\r\n                            : p\r\n                    )\r\n                }\r\n                console.log('PÄIVITETTY: ', updatedGetRound)\r\n                client.writeQuery({\r\n                    query: GET_ROUND,\r\n                    variables: { roundId: kierrosData.data.getRound.id },\r\n                    data: {\r\n                        getRound: {\r\n                            ...dataMuistissa.getRound,\r\n                            players: dataMuistissa.getRound.players.map(p =>\r\n                                (p.user.user === pushed.data.changedCard.data.user.user)\r\n                                    ? pushed.data.changedCard.data\r\n                                    : p\r\n                            )\r\n                        }\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n        }\r\n    }, [pushed])\r\n\r\n    return (\r\n        <div>\r\n            <Grid container className=\"rundiValitsin\">\r\n                <Grid item ><IconButton onClick={() => dispatch({ type: 'DEC_ROUND' })}><ChevronLeft /></IconButton></Grid>\r\n                <Grid item component={'h2'}>Round {kierros + 1}</Grid>\r\n                <Grid item><IconButton onClick={() => dispatch({ type: 'INC_ROUND' })}><ChevronRight /></IconButton></Grid>\r\n            </Grid>\r\n            {kierrosData.data.getRound.players.map(p => <Player key={p.user.id + 'ppp'} player={p} round={kierros} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tulosruutu","import { useQuery } from \"@apollo/client\"\r\nimport { Button, Checkbox, Divider, FormControlLabel, InputLabel, List, ListItem, Modal, Select } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { GET_ME } from \"../../queries\"\r\n\r\nconst NewGameModal = ({ open, setModal, handleNewGame }) => {\r\n\r\n    const mina = useQuery( GET_ME )\r\n    const [ pelaajat, setPelaajat ] = useState([])\r\n\r\n    if (mina.loading) {\r\n        return (\r\n            <h2>Loading stuff...</h2>\r\n        )\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        handleNewGame( pelaajat )\r\n    }\r\n    const handleClick = (pelaaja) => {\r\n        if (pelaajat.includes(pelaaja.id)) {\r\n            setPelaajat( pelaajat.filter( p => p !== pelaaja.id ))\r\n        } else {\r\n            setPelaajat( [...pelaajat, pelaaja.id] )\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal\r\n                open={open}\r\n                onClose={() => setModal(false)}\r\n            >\r\n                <div className=\"newGameModal\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <h2>Uusi peli</h2>\r\n                        <div>\r\n                            <InputLabel htmlFor=\"age-native-simple\">Pelimoodi</InputLabel>\r\n                            <Select native>\r\n                                <option value={0}>Normaali</option>\r\n                            </Select>\r\n                        </div>\r\n                        <Divider />\r\n                        <div>\r\n                            <h3>Pelaajat</h3>\r\n                            <List>\r\n                            <ListItem>\r\n                                <FormControlLabel control={<Checkbox checked />} label=\"Minä\" />\r\n                            </ListItem>\r\n                            <Kaverivalinta kaverit={mina.data.getMe.friends} handleClick={handleClick} />\r\n                            </List>\r\n                            <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Aloita</Button>\r\n                            <Button fullWidth onClick={() => setModal(false)} variant=\"contained\" color=\"secondary\" style={{ marginTop: '5px' }}>Kansel</Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Kaverivalinta = ({ kaverit, handleClick }) => {\r\n    return (\r\n        kaverit.map(k => <ListItem key={k.id}><FormControlLabel control={<Checkbox onChange={() => handleClick(k)} />} label={k.user} /></ListItem>)\r\n    )\r\n}\r\n\r\nexport default NewGameModal","import { Paper } from '@material-ui/core'\r\nimport { ValueAxis, Chart, Title, BarSeries, ArgumentAxis } from '@devexpress/dx-react-chart-material-ui'\r\nimport { Animation } from '@devexpress/dx-react-chart'\r\n\r\nconst BarChart = ({ data, otsikko=''}) => {\r\n    return (\r\n        <Paper>\r\n            <Chart data={data} height='250'>\r\n                <Title text={otsikko} />\r\n                <ArgumentAxis />\r\n                <ValueAxis min={0} max={100} />\r\n                <BarSeries\r\n                    argumentField=\"dist\"\r\n                    valueField=\"prossa\"\r\n                />\r\n                <Animation />\r\n            </Chart>\r\n        </Paper>\r\n    )\r\n\r\n}\r\nexport default BarChart","import { statistiikat, tulokset2ChartData } from \"../../utils/stuff\"\r\n\r\nimport BarChart from '../../components/BarChart'\r\n\r\nconst PlayerStats = ({ player }) => {\r\n\r\n    const statsit = tulokset2ChartData(player.tulokset)\r\n    return (\r\n        <div>\r\n            <BarChart data={statsit} />\r\n        </div>\r\n    )\r\n}\r\nexport default PlayerStats","\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        hidden={value !== index}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n            children\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  export default TabPanel\r\n  ","import { useMutation, useLazyQuery } from '@apollo/client'\r\nimport { Button, Divider, CircularProgress } from '@material-ui/core'\r\nimport { Tabs, Tab, Backdrop } from '@material-ui/core'\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CREATE_GAME, GET_ROUND, END_GAME, GET_GAMES } from '../../queries'\r\nimport Tulosruutu from './Tulosruutu'\r\nimport NewGameModal from './NewGameModal'\r\nimport PlayerStats from './PlayerStats'\r\nimport { Redirect } from 'react-router'\r\nimport TabPanel from './TabPanel'\r\n\r\nimport { Container } from '@material-ui/core'\r\n\r\nconst Peli = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [modalOpen, setModal] = useState(false)\r\n    const [tabValue, setTabValue] = useState(0)\r\n\r\n    const tulokset = useSelector(state => state.tulokset)\r\n    const user = useSelector(state => state.user)\r\n\r\n    const [haeRundi, kierrosData] = useLazyQuery(GET_ROUND)\r\n\r\n    const [uusiPeli] = useMutation(CREATE_GAME)\r\n    const [paataPeli] = useMutation(END_GAME)\r\n\r\n    const handleNewGame = async (pelaajat) => {\r\n\r\n        const res = await uusiPeli({ variables: { pelaajat: pelaajat }, refetchQueries: [{ query: GET_GAMES }] })\r\n\r\n        dispatch({ type: 'SET_ID', data: { roundId: res.data.createGame } })\r\n        setModal(false);\r\n    }\r\n    const handleEndGame = async () => {\r\n\r\n        try {\r\n            await paataPeli({ variables: { id: tulokset.roundId }, refetchQueries: [ { query: GET_GAMES }] })\r\n        } catch (e) {\r\n            console.log('Virhe pelin päättämisessä. ' + e.message)\r\n        }\r\n        return (\r\n            <Redirect to=\"/pelit\" />\r\n        )\r\n\r\n    }\r\n    if (!user.user) {\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n    }\r\n    if (kierrosData.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n\r\n        )\r\n    }\r\n    if (!kierrosData.called && tulokset.roundId)\r\n        haeRundi({ variables: { roundId: tulokset.roundId } });\r\n    if (tulokset.roundId === null || !kierrosData.data) {\r\n        return (\r\n            <div>\r\n                <h2>Pakko päästä puttaa</h2>\r\n                <p>\r\n                    Ei aktiivista peliä käynnissä. Aloita joko uusi peli tai jatkaa vanhaa peliä.\r\n                </p>\r\n                <p>\r\n                    Vanhan pelin jatkaminen onnistuu aktivoimalla se 'Vanhat peli' -osiosta.\r\n                </p>\r\n                <Button onClick={() => setModal(true)} color=\"primary\" variant=\"contained\" size=\"large\" fullWidth>Aloita uusi peli</Button>\r\n\r\n                <NewGameModal open={modalOpen} setModal={setModal} handleNewGame={handleNewGame} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Tabs\r\n                value={tabValue}\r\n                onChange={(event, uusi) => setTabValue(uusi)}\r\n                variant=\"fullWidth\"\r\n                style={{ backgroundColor: '#3f51b5', color: 'white' }}\r\n            >\r\n                <Tab label=\"Peli\" />\r\n                <Tab label=\"Asetukset\" />\r\n                <Tab label=\"Statsit\" />\r\n            </Tabs>\r\n\r\n            <Container>\r\n                <TabPanel value={tabValue} index={0}>\r\n                    <Tulosruutu kierrosData={kierrosData} tulokset={tulokset} />\r\n                </TabPanel>\r\n                <TabPanel value={tabValue} index={1}>\r\n                    <h2>Mitä tehdään?</h2>\r\n                    <h3>Poistu pelistä</h3>\r\n                    <p>\r\n                        Poistu päävalikkoon. Peli on tallennettu ja tulosten merkkaamista voi jatkaa.\r\n                    </p>\r\n                    <Button size=\"large\" onClick={() => dispatch({ type: 'RESET_ROUND' })} variant=\"contained\" color=\"primary\" fullWidth>Poistu pelistä</Button>\r\n                    <Divider style={{ marginTop: '15px' }} />\r\n                    <h3>Päätä peli</h3>\r\n                    <p>\r\n                        Peli päätetään. Tulosten kirjaaminen suljetaan.\r\n                    </p>\r\n                    <Button onClick={handleEndGame} size=\"large\" variant=\"contained\" color=\"primary\" fullWidth>Päätä peli</Button>\r\n                    <Divider style={{ marginTop: '15px' }} />\r\n                    <h3>Hylkää peli</h3>\r\n                    <p>\r\n                        Kaikki tuhotaan.\r\n                    </p>\r\n                    <Button size=\"large\" variant=\"contained\" color=\"primary\" fullWidth>Tuhoa maailma</Button>\r\n                </TabPanel>\r\n                <TabPanel value={tabValue} index={2}>\r\n                    {kierrosData.data.getRound.players.map(p => <PlayerStats player={p} key={'ps' + p.user.id} />)}\r\n                </TabPanel>\r\n            </Container>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Peli;","import { useQuery } from '@apollo/client'\r\nimport { ArgumentAxis, ValueAxis, LineSeries, Chart, Title } from '@devexpress/dx-react-chart-material-ui'\r\nimport { Backdrop, CircularProgress, Paper, Grid } from '@material-ui/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { GET_GAMES } from '../../queries'\r\nimport { laskePisteet, tulokset2ChartData } from '../../utils/stuff'\r\nimport BarChart from '../../components/BarChart'\r\nimport { Animation } from '@devexpress/dx-react-chart'\r\n\r\n\r\nconst Statsit = () => {\r\n\r\n    const statsRawData = useQuery(GET_GAMES)\r\n    const user = useSelector(state => state.user)\r\n\r\n    if (statsRawData.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    const statsData = statsRawData.data.getGames\r\n    let kaikkiPuttiProssat = tulokset2ChartData()\r\n    let kaikkiPisteet = []\r\n    let maxPisteet = 0\r\n    for (let i = 0; i < statsData.length; i++) {\r\n        const player = statsData[i].players.find(p => p.user.user === user.user)\r\n        kaikkiPuttiProssat = tulokset2ChartData(player.tulokset, kaikkiPuttiProssat)\r\n        const pisteet = laskePisteet(player.tulokset)\r\n        if (pisteet > maxPisteet) maxPisteet = pisteet\r\n        kaikkiPisteet.push({ game: i, score: pisteet })\r\n    }\r\n    console.log(kaikkiPisteet)\r\n\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Grid>\r\n                    <Grid>\r\n                        Pelejä: {statsData.length}\r\n                    </Grid>\r\n                    <Grid>\r\n                        Paras tulos: {maxPisteet}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <BarChart data={kaikkiPuttiProssat} otsikko=\"Puttiprossat\" />\r\n\r\n            <Chart data={kaikkiPisteet} height='200'>\r\n                <Title text=\"Pisteet\" />\r\n                <ArgumentAxis />\r\n                <ValueAxis />\r\n                <LineSeries\r\n                    argumentField=\"game\"\r\n                    valueField=\"score\"\r\n                />\r\n                <Animation />\r\n            </Chart>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statsit","\r\nconst reducer = (state = {}, action ) => {\r\n    switch(action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                user: action.data.user,\r\n                name: action.data.name\r\n            }\r\n        case 'CLEAR_USER':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setUser = (name, user) => {\r\n    return {\r\n        type: 'SET_USER',\r\n        data: {\r\n            user,\r\n            name\r\n            \r\n        }\r\n    }\r\n}\r\nexport const clearUser = () => {\r\n    return {\r\n        type: 'CLEAR_USER',\r\n        data: {}\r\n    }\r\n}\r\nexport default reducer","import { useState } from 'react'\r\nimport { Button, TextField, List, ListItem, Backdrop, CircularProgress } from '@material-ui/core'\r\nimport { useApolloClient, useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries'\r\nimport { setUser, clearUser } from '../reducers/userReducer'\r\nimport { setNotification } from '../reducers/notificationReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst LoginForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(state => state.user);\r\n\r\n    const [loginProcess, setLoginProcess] = useState(false)\r\n    const [ login ] = useMutation( LOGIN );\r\n    const client = useApolloClient()\r\n\r\n    const handleLogout = async (e) => {\r\n        await client.clearStore()\r\n        window.localStorage.clear()\r\n        dispatch( clearUser() );\r\n        dispatch( { type: 'RESET_ROUND' })\r\n    }\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault()\r\n        setLoginProcess(true);\r\n        login({ variables: { user: e.target.user.value, password: e.target.password.value }}).then(result => {\r\n            window.localStorage.setItem('rageToken', result.data.login.value)\r\n            console.log('Login data: ', result.data.login)\r\n            const sailo = setUser(result.data.login.user.name, result.data.login.user.user);\r\n            dispatch(sailo);\r\n            setLoginProcess(false);\r\n        }).catch(e => {\r\n            dispatch( setNotification('Väärä tunnus tai salasana', 'error'))\r\n            setLoginProcess(false);\r\n        })\r\n    }\r\n    console.log(user)\r\n    if (user.user) {\r\n        return (\r\n            <div>\r\n                <h1>Kirjautunut</h1>\r\n                <p>Olet kirjautunut {user.user}:na</p>\r\n                <Button onClick={handleLogout} variant=\"contained\" color=\"primary\">Kirjaudu ulos</Button>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Backdrop open={loginProcess}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n\r\n            <h1>Kirjaudu sisään</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <List>\r\n                    <ListItem><TextField name=\"user\" label=\"Tunnus\" variant=\"outlined\" fullWidth /></ListItem>\r\n                    <ListItem><TextField name=\"password\" label=\"Salasana\" variant=\"outlined\" type=\"password\" fullWidth /></ListItem>\r\n                    <ListItem><Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">Kirjaudu</Button></ListItem>\r\n                </List>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import { Button, TextField } from '@material-ui/core'\r\n\r\nconst FriendRequestForm = ({ handleSendFriendRequest }) => {\r\n    return (\r\n        <>\r\n        <h2>Lähetä kaveripyyntö</h2>\r\n        <form onSubmit={handleSendFriendRequest}>\r\n        <TextField label=\"Nimi\" variant=\"outlined\" fullWidth name=\"kaveri\" />\r\n        <Button type=\"submit\" variant=\"contained\" fullWidth size=\"large\" color=\"primary\" style={{marginTop: '5px'}}>Lähetä</Button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\nexport default FriendRequestForm","import { IconButton, Paper } from '@material-ui/core'\r\nimport { Cancel, Check } from '@material-ui/icons/'\r\n\r\nconst FriendRequests = ({ pyynnot, handleFriendRequest }) => {\r\n    if (pyynnot.length < 1) {\r\n        return (\r\n            <h3>Ei kaveripyyntöjä</h3>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <h2>Kaveripyynnöt</h2>\r\n            {pyynnot.map(k => <KaveriKortti handleFriendRequest={handleFriendRequest} kaveri={k} key={k.id} />)}\r\n        </>\r\n    )\r\n}\r\nconst KaveriKortti = ({ kaveri, handleFriendRequest }) => {\r\n    return (\r\n        <Paper elevation={2} style={{ paddingLeft: '5px', display: 'inline-block', width: '100%'}}>\r\n            <div style={{float: 'left', paddingTop: '10px', fontWeight: 'bold' }}>\r\n               {kaveri.user} ({kaveri.name})\r\n            </div>\r\n            <div style={{float: 'right' }}>\r\n                <IconButton onClick={() => handleFriendRequest(kaveri.id, true )}>\r\n                    <Check style={{ color: 'green' }} />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleFriendRequest(kaveri.id, false )}>\r\n                    <Cancel style={{ color: 'red' }} />\r\n                </IconButton>\r\n            </div>\r\n\r\n        </Paper>\r\n    )\r\n}\r\nexport default FriendRequests","import { useMutation, useQuery } from \"@apollo/client\"\r\nimport { ANSWER_FRIEND_REQUEST, GET_ME, SEND_FRIEND_REQUEST } from \"../../queries\"\r\nimport FriendRequestForm from \"./FriendRequestForm\"\r\nimport FriendRequests from \"./FriendRequests\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { setNotification } from '../../reducers/notificationReducer'\r\n\r\nconst Kaverit = () => {\r\n\r\n    const mina = useQuery(GET_ME)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [ answerFriendRequest ] = useMutation( ANSWER_FRIEND_REQUEST, { refetchQueries: [{ query: GET_ME }] } )\r\n    const [ sendFriendRequest ] = useMutation( SEND_FRIEND_REQUEST)\r\n\r\n    const handleSendFriendRequest = (e) => {\r\n        e.preventDefault()\r\n        sendFriendRequest( { variables: { name: e.target.kaveri.value }} ).then(res => {\r\n            dispatch( setNotification('Kaveripyyntö lähetetty!', 'success'))\r\n        }).catch(e => {\r\n            dispatch( setNotification('Pyyntö epäonnistui: ' + e.message, 'error'))\r\n        })\r\n        e.target.kaveri.value = ''\r\n    }\r\n    const handleFriendRequest = (friendId, answer) => {\r\n        answerFriendRequest( { variables: { friendId, answer }}).then(res => {\r\n            dispatch( setNotification('Kaveripyyntö hyväksytty', 'success'))\r\n        }).catch(e => {\r\n            dispatch( setNotification('Tapahtui virhe: ' + e.message, 'error' ))\r\n        })\r\n    }\r\n    if (mina.loading) {\r\n        return ( <h2>Loading friends...</h2>)\r\n    }\r\n    console.log(mina)\r\n    return (\r\n        <div>\r\n        <h2>Kaverisi</h2>\r\n        <KaveriLista kaverit={mina.data.getMe.friends} />\r\n        <FriendRequests pyynnot={mina.data.getMe.friendRequests} handleFriendRequest={handleFriendRequest} />\r\n        <FriendRequestForm handleSendFriendRequest={handleSendFriendRequest} />\r\n        </div>\r\n    )\r\n\r\n}\r\nconst KaveriLista = ({ kaverit }) => {\r\n    if (kaverit.length < 1) {\r\n        return (<div>Ei kavereita :(</div>)\r\n    }\r\n    return (\r\n        <div> {kaverit.map(k => <li key={k.id}>{k.user} ({k.name})</li>)}</div>\r\n    )\r\n}\r\nexport default Kaverit","import { useQuery } from \"@apollo/client\"\r\nimport { Backdrop, CircularProgress, Grid, TextField, } from \"@material-ui/core\"\r\nimport { GET_ME } from \"../../queries\"\r\n\r\nconst Asetukset = () => {\r\n\r\n    const user = useQuery(GET_ME)\r\n    if (user.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Tiedot</h1>\r\n            <Grid container>\r\n                <Grid item xs={6}>Tunnus</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.user}</Grid>\r\n                <Grid item xs={6}>Nimi</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.name}</Grid>\r\n                <Grid item xs={6}>Sähköposti</Grid>\r\n                <Grid item xs={6}>{user.data.getMe.email}</Grid>\r\n            </Grid>\r\n            <h2>Vaihda salasana</h2>\r\n            <TextField type=\"password\" variant=\"outlined\" label=\"Uusi salasana\" fullWidth size=\"small\"/>\r\n            <TextField type=\"password\" variant=\"outlined\" label=\"Salasana uudestaan\" fullWidth size=\"small\"/>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Asetukset","import { useMutation } from \"@apollo/client\"\r\nimport { ListItem, List, Button, TextField, Divider, Container } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { CREATE_USER } from '../../queries'\r\nimport { setNotification } from \"../../reducers/notificationReducer\"\r\n\r\nconst CreateUserForm = () => {\r\n\r\n    const [createUser, cuData ] = useMutation(CREATE_USER)\r\n    const dispatch = useDispatch()\r\n\r\n    const [ errors, setErrors] = useState({ tunnus: false, password: false })\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const vars = {\r\n            user: e.target.user.value,\r\n            password: e.target.password.value,\r\n            name: e.target.name.value,\r\n            email: e.target.email.value\r\n        }\r\n        if (vars.user === '') {\r\n            setErrors( { ...errors, tunnus: true })\r\n        } else if (vars.password === '' || vars.password !== e.target.password2.value) {\r\n            setErrors( { ...errors, password: true })\r\n        }\r\n        else {\r\n            try {\r\n                await createUser({ variables: vars })\r\n                dispatch(setNotification('Tunnukset luotiin onnistuneesti', 'success'))\r\n            } catch (e) {\r\n                dispatch(setNotification('Virhe tunnusten luonnissa: ' + e.message, 'error'))\r\n            }\r\n        }\r\n    }\r\n    if (cuData.loading) {\r\n        return (<h2>Creating user...</h2>)\r\n    }\r\n    if (cuData.called && !cuData.error) {\r\n        return (<Redirect to=\"/login\" /> )\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Luo tunnus</h1>\r\n            <h2>Perustiedot</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <List>\r\n                    <ListItem><TextField error={errors.tunnus} name=\"user\" label=\"Tunnus\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField error={errors.password} name=\"password\" type=\"password\" label=\"Salasana\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField error={errors.password} name=\"password2\" label=\"Salasana uudestaan\" type=\"password\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <Divider style={{ marginTop: '15px' }} />\r\n                    <h2>Lisätiedot</h2>\r\n                    <Container>\r\n                        Ei pakollisia. Sähköpostiosoitteen antaminen mahdollistaa tunnusten palauttamisen.\r\n                    </Container>\r\n                    <ListItem><TextField name=\"name\" label=\"Nimi\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><TextField name=\"email\" label=\"Sähköposti\" variant=\"outlined\" fullWidth></TextField></ListItem>\r\n                    <ListItem><Button type=\"submit\" size=\"large\" variant=\"contained\" fullWidth color=\"primary\">Luo tunnus</Button></ListItem>\r\n                </List>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUserForm","import { Button, Card, CardHeader, CardContent, Collapse } from '@material-ui/core'\r\nimport { laskePisteet, statistiikat, timestamp2String, tulokset2ChartData } from '../../utils/stuff'\r\nimport { useState } from 'react'\r\nimport { IconButton, Typography } from '@material-ui/core'\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport WarningIcon from '@material-ui/icons/Warning'\r\n\r\nimport BarChart from '../../components/BarChart'\r\n\r\nconst Pelikortti = ({ peli, aktivoi, user }) => {\r\n\r\n    let { tulokset } = peli.players.find(p => p.user.user === user)\r\n    const pisteet = laskePisteet(tulokset)\r\n\r\n    const [showStats, setShotStats] = useState(false)\r\n\r\n    if (tulokset.length === 0) {\r\n        tulokset = [0]\r\n    }\r\n    return (\r\n        <Card style={{ marginBottom: '5px' }} variant=\"outlined\">\r\n            <CardHeader\r\n                avatar= {\r\n                    (!peli.finished && <WarningIcon style={{color: 'orange'}}/>)\r\n                }\r\n                action={\r\n                    <IconButton onClick={() => setShotStats(!showStats)} size=\"small\">\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                }\r\n\r\n                title={ (showStats) ? pisteet : null}\r\n                subheader={ ((showStats) ? timestamp2String(peli.timestamp) : pisteet) }\r\n            />\r\n            <Collapse in={showStats} unmountOnExit timeout=\"auto\">\r\n                <CardContent style={{paddingTop: '0px'}}>\r\n                    { (!peli.finished && <Button size=\"small\" variant=\"outlined\" color=\"primary\" onClick={() => aktivoi(peli.id)}>Jatka peliä</Button>)}\r\n                    <Typography>\r\n                        Puttiprossa: { (tulokset.reduce((total, cur) => total+cur) / (tulokset.length*5) * 100).toFixed()}\r\n                    </Typography>\r\n                    <BarChart data={tulokset2ChartData(tulokset)} />\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    )\r\n\r\n}\r\nexport default Pelikortti","import { useQuery } from \"@apollo/client\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { GET_GAMES } from \"../../queries\"\r\nimport { Backdrop, CircularProgress, Container } from '@material-ui/core'\r\nimport Pelikortti from \"./Pelikortti\"\r\n\r\nimport { setNotification } from '../../reducers/notificationReducer'\r\n\r\nconst VanhatPelit = () => {\r\n\r\n    const getGames = useQuery(GET_GAMES)\r\n    const user = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const aktivoi = (g) => {\r\n        dispatch({ type: 'SET_ID', data: { roundId: g }})\r\n        dispatch( setNotification('Peli akitoivu, valitse \\'Uusi peli\\'', 'info') )\r\n    }\r\n\r\n    if (!user.user) {\r\n        return (\r\n            <Redirect to=\"/login\" />\r\n        )\r\n    }\r\n\r\n    if (getGames.loading) {\r\n        return (\r\n            <Backdrop open={true}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        )\r\n    }\r\n    console.log(getGames)\r\n    return (\r\n        <Container>\r\n            <h2>Vanhat pelit</h2>\r\n            {getGames.data.getGames.map(g => <Pelikortti user={user.user} aktivoi={aktivoi} peli={g} key={g.id} />)}\r\n        </Container>\r\n    )\r\n}\r\nexport default VanhatPelit","import { Container, Typography, Divider, Paper} from '@material-ui/core'\r\n\r\nconst Etusivu = () => {\r\n    return (\r\n        <Container>\r\n            <Paper elevation={3} className=\"paperi\">\r\n            <Typography variant=\"h4\">\r\n                Mitä tämä on?\r\n            </Typography>\r\n            <Typography paragraph>\r\n                Rageputt on Fullstackopen 2021:n harjoitustyön tulos. Sovelluksen tarkoitus\r\n                on pitää kirjaa JYLY-pelien tuloksista.\r\n            </Typography>\r\n            </Paper>\r\n            <Paper elevation={2} className=\"paperi\">\r\n            <Typography variant=\"h4\">\r\n                No mikä se JYLY sitten on?\r\n            </Typography>\r\n            <Typography paragraph>\r\n                JYLY Putting game is a putt practice drill/game created by Markus Lindqvist \r\n                (found by nickename JYLY in dgcr forums as well as frisbeegolf-forum). The drill \r\n                emphasizes putting from various distances. The more putts you sink and the further \r\n                you do it, more points you get. (copypaste)\r\n            </Typography>\r\n            </Paper>\r\n            <Paper elevation={2} className=\"paperi\">\r\n            <Typography variant=\"h4\">\r\n               Kerro lisää\r\n            </Typography>\r\n            <Typography paragraph>\r\n                Jotta voit käyttää sovellusta, tulee sinun luoda oma tunnus. Tämän jälkeen voit aloittaa\r\n                armottoman puttaamisen. Myöhemmin kun on liian pimeää puttaamiselle, voit ihailla ihanaa\r\n                diagrammidataa! \r\n            </Typography>\r\n            <Typography paragraph>\r\n                Jos satut omistamaan ystäviä, voit lähettää heille kaveripyynnön ja lisätä heidät ystäviksesi.\r\n                Tämän jälkeen voitte yhdessä tuumin puttailla toisianne.\r\n            </Typography>\r\n            </Paper>\r\n        </Container>\r\n\r\n    )\r\n}\r\nexport default Etusivu\r\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport { Container } from '@material-ui/core'\n\nimport Notification from './components/Notification'\nimport Vetomenu from './components/Vetomenu'\nimport YlaPalkki from './components/YlaPalkki';\n\nimport Peli from './pages/Peli';\nimport Statsit from './pages/Statsit'\nimport LoginForm from './components/LoginForm'\nimport Kaverit from './pages/Kaverit'\nimport Asetukset from './pages/Asetukset'\nimport CreateUserForm from './pages/CreateUser';\nimport VanhatPelit from './pages/VanhatPelit';\nimport Etusivu from './pages/Etusivu'\n\n\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GET_ME } from './queries';\nimport { useLazyQuery } from '@apollo/client';\nimport { setUser } from './reducers/userReducer';\n\n\nfunction App() {\n\n  const [menuOpen, setMenuOpen] = useState(false)\n  const dispatch = useDispatch()\n  const user = useSelector(state => state.user)\n\n  const [getMe, gotme] = useLazyQuery(GET_ME)\n\n  const openMenu = () => {\n    setMenuOpen(true)\n  }\n  useEffect(() => {\n    const otaToken = () => {\n      const token = localStorage.getItem('rageToken')\n      console.log(token)\n      console.log(user)\n      if (token && !user.user) {\n        if (!gotme.loading && gotme.data) {\n          console.log(gotme)\n          dispatch( setUser(gotme.data.getMe.name, gotme.data.getMe.user))\n        }\n        else if (gotme.called === false) {\n          getMe()\n        }\n      }\n    }\n    otaToken()\n  }, [gotme])\n  return (\n    <div>\n\n      <YlaPalkki openMenu={openMenu} />\n      <Vetomenu menuOpen={menuOpen} setMenuOpen={setMenuOpen} />\n\n      <Notification />\n        <Switch>\n          <Route path=\"/kaverit\">\n            <Kaverit />\n          </Route>\n          <Route path=\"/login\" >\n            <LoginForm />\n          </Route>\n          <Route path=\"/vanhat\" >\n            <VanhatPelit />\n          </Route>\n          <Route path=\"/peli\">\n            <Peli />\n          </Route>\n          <Route path=\"/stats\">\n            <Statsit />\n          </Route>\n          <Route path=\"/createUser\">\n            <CreateUserForm />\n          </Route>\n          <Route path=\"/asetukset\">\n            <Asetukset />\n          </Route>\n          <Route path=\"/\">\n           <Etusivu />\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst reducer = (state = {round: 0, roundId: null}, action) => {\r\n    switch(action.type) {\r\n        case 'INC_ROUND':\r\n            if (state.round < 19)\r\n                return {...state, round: state.round + 1 }\r\n            else return state;\r\n        case 'DEC_ROUND':\r\n            if (state.round >= 1)\r\n                return {...state, round: state.round - 1 } \r\n            else return state;\r\n        case 'SET_ID':\r\n            return { ...state, roundId: action.data.roundId }\r\n        case 'INIT_ROUND':\r\n            return action.data;\r\n        case 'RESET_ROUND':\r\n            return { round: 0, roundId: null }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers, createStore } from 'redux';\r\nimport tuloksetReducer from './reducers/tuloksetReducer'\r\nimport userReducer from './reducers/userReducer'\r\nimport notificationReducer from './reducers/notificationReducer'\r\n\r\nconst reducers = combineReducers({\r\n    tulokset: tuloksetReducer,\r\n    user: userReducer,\r\n    notification: notificationReducer\r\n})\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { setContext } from 'apollo-link-context'\n\nimport { Provider } from 'react-redux'\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\n\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\nimport store from './store'\n\nlet ApolloUri = 'https://rageputt.herokuapp.com/graphql'\nif (process.env.NODE_ENV !== 'production') {\n  console.log('Development mode selected!')\n  ApolloUri = 'http://localhost:4000/graphql'\n}\n\nconst httpLink = new HttpLink({ uri: ApolloUri })\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('rageToken')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  }\n})\n\nconst socketLink = new WebSocketLink({\n  uri: (process.env.NODE_ENV !== 'production') ? 'ws://localhost:4000/graphql' : 'wss://rageputt.herokuapp.com/graphql',\n  options: {\n    reconnect: true\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  socketLink,\n  authLink.concat(httpLink)\n\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink,\n  connectToDevTools: true\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}